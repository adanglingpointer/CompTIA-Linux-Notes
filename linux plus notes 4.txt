Chapter 9. Backup, Restore, and Compress Files

Archive files with tar and cpio
-------------------------------

 - In Linux we use an archiver to preserve metadata (permissions, ownership, access control lists) as well as the file data itself.

Linux Archivers
 - cpio - copy in/copy out
 - tar - tape archiver

cpio
----

su -
	Because sudo doesn't work well with pipes, we'll first change to the root user.
find /etc | cpio -ov > etc.cpio
	The find command sends a list of files in /etc including absolute path to cpio, which creates an archive and includes them.
cpio -itvI etc.cpio
	List the files in the etc.cpio archive.
	-i = extract
	-t = list table of contents
	-v = verbose
	-I = specify the cpio archive instead of reading from standard in
cpio -iv --no-absolute-filenames -I etc.cpio
	Extract the archive in current directory.
	This will extract the files where you are, without regard for the absolute file path in the archive.
	Leave the --no-absolute-filenames out to extract and overwrite the files in their original locations.

tar
---

tar Options

Option		Function
-c		Create
-x		Extract
-t		List
-v		Verbose
-p		Preserve permissions
--xattrs	Preserves extended attributes, such as access control list and SELinux security context
-f		File name to use for archive
-C		Changes to different directory before extracting, instead of extracting in current directory

 - tar does not compress archives itself, but has the ability to call external compression tools.

Linux Compression Tools
 - gzip
 - bzip
 - xz

sudo tar --xattrs -cvpf etc.tar /etc

sudo tar --gzip --xattrs -cvpf etc.tar.gz /etc

sudo tar --bzip2 --xattrs -cvpf etc.tar.bz2 /etc
	Smaller archive.

sudo tar --xz --xattrs -cvpf etc.tar.xz /etc
	Smallest archive, takes longer to compress.

tar -tf etc.tar
	List files in tar archive.
tar -tf etc.tar | grep firewall
	Find firewall within archive.

sudo tar --xattrs -xvpf etc.tar
	Extract in current directory.

sudo tar --xattrs -xvpf etc.tar -C /home/user1/Download
	Extract in /home/user1/Download

dd
--

dd syntax:
dd [options] if=<input device> of=<output device>
	The input and output devices can be a range of blocks, a partition, or an entire drive.

dd Options:

Option		Function
bs=		Block size; larger block sizes lower the I/Os necessary to copy a drive
count=		Number of blocks
status=		Command status setting

sudo dd if=/dev/sda of=~/mbr.bin bs=512 count=1 status=progress
	Create a backup of the master boot record.

==========

Compress files
--------------

 - You might want to use a compressor without Tar if you just want to make a file smaller and you were not concerned about metadata like file ownership, permissions, or timestamps.

gzip
----

cp /etc/services .
	copying services to current directory
gzip services
	This will replace existing file with the archive.
	This is different from archivers like Tar that leave the original files intact and create a new archive.
gunzip services.gz
	Decompress file.
	This will remove the archive file completely.

bzip2
-----

bzip2 services
bunzip2 services.bz2

xz
--

xz services
unxz services.xz

 - If you want to archive a directory full of files and directories, use Tar and one of the compressors, as Tar will preserve metadata as well.
 - On Windows, the ZIP archiver is popular, which does a fairly good job of recursively archiving and compressing directories of files.  We can also use ZIP on Linux as well.

zip
---

zip services.zip services
	This will leave the original file in place and create a new archive.
unzip services.zip

==========

Copy files between systems
--------------------------

SCP syntax:
scp [options] <local files> remoteuser@remotehost:remotepath

 - scp uses the authentication and tunnel link functionality of SSH

SSH Options

Option	Function
-P	Remote network port (if not 22)
-p	Preserves permissions
-r	Copies files recursively
-C	Compresses files
-c	Specifies the cipher; Some ciphers require fewer CPU cycles and can speed up a copy
-i	SSH key file

Copy files with SCP

scp /etc/hosts user1@dbhost1:/home/user1/
	Copy local hosts file to remote user1 directory

 - SCP respects file permissions and ownership, so in order to copy the local /etc/hosts file to the remote /home/user1 location, the local user needs to be able to read /etc/hosts and the remote user (user1) needs to be able to write to the /home/user1 directory.

Copy files with SSH (by piping data into it)

cat /etc/hosts | ssh user1@dbhost1 "cat - > /home/user1/hosts"
	cat reads the local hosts file and sends it to the standard in of SSH,
	 which then logs into dbhost1 as user1 and executes the commands between the quotes on the remote machine.
	The cat command on the remote host reads from standard in and redirects the output to /home/user1/hosts
	Essentially, this is doing the same as scp but with more typing.

Duplicate disk with dd and SSH

dd if=/dev/sda | ssh user1@dbhost1 "dd of=/dev/sdb"

 - A simpler, less secure, and faster way of copying a file between two systems is using network cat, or ncat.

On the destination machine run:
ncat -l 8080 > ~/file
		This will start ncat listening on port 8080, and whatever comes into that port will be redirected 
		to ~/file

On the sending machine:
ncat <IP> 8080 --send-only < /etc/hosts

 - ncat provides no security or protection from eavesdroppers, so only use it on a local network.

 - rsync works a lot like the cp command, however instead of blindly copying files, it can compare files and skip them if they exist, or do low level checksums to see if the files are complete or need to be resent.

Rsync syntax

rsync [options] <source> <destination>

rsync *.txt /media/backups	==	cp *.txt /media/backups

rsync -r /etc /media/backups	==	cp -r /etc /media/backups
	rsync recursive syntax
	This will copy the /etc/ directory and all of its files to /media/backups