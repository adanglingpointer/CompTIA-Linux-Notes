Chapter 9. Backup, Restore, and Compress Files

Archive files with tar and cpio
-------------------------------

 - In Linux we use an archiver to preserve metadata (permissions, ownership, access control lists) as well as the file data itself.

Linux Archivers
 - cpio - copy in/copy out
 - tar - tape archiver

cpio
----

su -
	Because sudo doesn't work well with pipes, we'll first change to the root user.
find /etc | cpio -ov > etc.cpio
	The find command sends a list of files in /etc including absolute path to cpio, which creates an archive and includes them.
cpio -itvI etc.cpio
	List the files in the etc.cpio archive.
	-i = extract
	-t = list table of contents
	-v = verbose
	-I = specify the cpio archive instead of reading from standard in
cpio -iv --no-absolute-filenames -I etc.cpio
	Extract the archive in current directory.
	This will extract the files where you are, without regard for the absolute file path in the archive.
	Leave the --no-absolute-filenames out to extract and overwrite the files in their original locations.

tar
---

tar Options

Option		Function
-c		Create
-x		Extract
-t		List
-v		Verbose
-p		Preserve permissions
--xattrs	Preserves extended attributes, such as access control list and SELinux security context
-f		File name to use for archive
-C		Changes to different directory before extracting, instead of extracting in current directory

 - tar does not compress archives itself, but has the ability to call external compression tools.

Linux Compression Tools
 - gzip
 - bzip
 - xz

sudo tar --xattrs -cvpf etc.tar /etc

sudo tar --gzip --xattrs -cvpf etc.tar.gz /etc

sudo tar --bzip2 --xattrs -cvpf etc.tar.bz2 /etc
	Smaller archive.

sudo tar --xz --xattrs -cvpf etc.tar.xz /etc
	Smallest archive, takes longer to compress.

tar -tf etc.tar
	List files in tar archive.
tar -tf etc.tar | grep firewall
	Find firewall within archive.

sudo tar --xattrs -xvpf etc.tar
	Extract in current directory.

sudo tar --xattrs -xvpf etc.tar -C /home/user1/Download
	Extract in /home/user1/Download

dd
--

dd syntax:
dd [options] if=<input device> of=<output device>
	The input and output devices can be a range of blocks, a partition, or an entire drive.

dd Options:

Option		Function
bs=		Block size; larger block sizes lower the I/Os necessary to copy a drive
count=		Number of blocks
status=		Command status setting

sudo dd if=/dev/sda of=~/mbr.bin bs=512 count=1 status=progress
	Create a backup of the master boot record.

==========

Compress files
--------------

 - You might want to use a compressor without Tar if you just want to make a file smaller and you were not concerned about metadata like file ownership, permissions, or timestamps.

gzip
----

cp /etc/services .
	copying services to current directory
gzip services
	This will replace existing file with the archive.
	This is different from archivers like Tar that leave the original files intact and create a new archive.
gunzip services.gz
	Decompress file.
	This will remove the archive file completely.

bzip2
-----

bzip2 services
bunzip2 services.bz2

xz
--

xz services
unxz services.xz

 - If you want to archive a directory full of files and directories, use Tar and one of the compressors, as Tar will preserve metadata as well.
 - On Windows, the ZIP archiver is popular, which does a fairly good job of recursively archiving and compressing directories of files.  We can also use ZIP on Linux as well.

zip
---

zip services.zip services
	This will leave the original file in place and create a new archive.
unzip services.zip

==========

Copy files between systems
--------------------------

SCP syntax:
scp [options] <local files> remoteuser@remotehost:remotepath

 - scp uses the authentication and tunnel link functionality of SSH

SSH Options

Option	Function
-P	Remote network port (if not 22)
-p	Preserves permissions
-r	Copies files recursively
-C	Compresses files
-c	Specifies the cipher; Some ciphers require fewer CPU cycles and can speed up a copy
-i	SSH key file

Copy files with SCP

scp /etc/hosts user1@dbhost1:/home/user1/
	Copy local hosts file to remote user1 directory

 - SCP respects file permissions and ownership, so in order to copy the local /etc/hosts file to the remote /home/user1 location, the local user needs to be able to read /etc/hosts and the remote user (user1) needs to be able to write to the /home/user1 directory.

Copy files with SSH (by piping data into it)

cat /etc/hosts | ssh user1@dbhost1 "cat - > /home/user1/hosts"
	cat reads the local hosts file and sends it to the standard in of SSH,
	 which then logs into dbhost1 as user1 and executes the commands between the quotes on the remote machine.
	The cat command on the remote host reads from standard in and redirects the output to /home/user1/hosts
	Essentially, this is doing the same as scp but with more typing.

Duplicate disk with dd and SSH

dd if=/dev/sda | ssh user1@dbhost1 "dd of=/dev/sdb"

 - A simpler, less secure, and faster way of copying a file between two systems is using network cat, or ncat.

On the destination machine run:
ncat -l 8080 > ~/file
		This will start ncat listening on port 8080, and whatever comes into that port will be redirected 
		to ~/file

On the sending machine:
ncat <IP> 8080 --send-only < /etc/hosts

 - ncat provides no security or protection from eavesdroppers, so only use it on a local network.

 - rsync works a lot like the cp command, however instead of blindly copying files, it can compare files and skip them if they exist, or do low level checksums to see if the files are complete or need to be resent.

Rsync syntax
------------

rsync [options] <source> <destination>

rsync *.txt /media/backups	==	cp *.txt /media/backups

rsync -r /etc /media/backups	==	cp -r /etc /media/backups
	rsync recursive syntax
	This will copy the /etc/ directory and all of its files to /media/backups

rsync -r /etc/ /media/backups	==	cp -r /etc/* /media/backups
	The trailing slash makes a different - this will copy the directory's contents recursively without the directory.

Remote rsync Syntax
-------------------

rsync -av --progress -e ssh <local files> <user@remotehost:path>
	-a = archive mode, which includes recursive, permissions, ownership, devices, and timestamps
	-v = verbose
	--progress = show progress output
	-e = specify ssh

 - accessing a system with access control list and SELinux or extended attributes, we can also include --acls, --xattrs, or both.
	rsync -av --progress --acls -e ssh <local files> <user@remotehost:path>
	rsync -av --progress --xattrs -e ssh <local files> <user@remotehost:path>

==========

Chapter 10. Manage Software

Software management systems overview
------------------------------------

 - Linux software repositories contain software packages, as well as an index of what they provide.
 - These indexes and the packages themselves can be cryptographically signed.
 - If the signature is incorrect, meaning it has been compromised, then the Linux package manager will reject it.

Debian					Red Hat					SUSE
Package: .deb				Package: .rpm				package: .rpm
Installer: APT				Installer: DNF				Installer: Zypper
(Advancaed Package Management Tool)

Software Package Contents
-------------------------
 - Binary programs
 - Documentation
 - Configuration files
 - Destination file locations
 - Installation scripts

 - Dependencies will be installed first, then the package.

Compiling from Source
---------------------
 - If binary package is unavailable
 - RPM or DEB packages source
 - Tarball packages source
 - Requires development tools to compile
 - Not recommended

Sandboxed Applications
----------------------
 - Use containers
 - Include all dependencies
 - Different applications can have different library versions
 - Distribution agnostic
 - Packages require more space

 - snapd
 - Flatpak
 - AppImage

snapd
-----
 - Created by Ubuntu
 - Central Snap Store
 - Can have multiple versions of an application simultaneously
 - Can completely replace local packages
 - Support for Ubuntu, Debian, RHEL

Flatpak
-------
 - Not developed by a distribution
 - Decentralized software
 - Addable software remotes
	Equivalent to repos
	FlatHub is the most popular remote and has the most applications
 - Replaces user software, not all software
 - Installed by default on most Linux distros

AppImage
--------
 - Simple - one file per app
 - Download, change permissions, execute
 - Run as regular user
 - Central repository
 - No real installation process

==========

DNF overview
------------

RPM Abilities
-------------
 - Reads list of dependencies
 - Can download from web or FTP servers
 - Does not maintain a list of available software
	RPM does not manage software collections in remote repositories

Dandified YUM Overview
----------------------
 - YUM (Yellow Dog Updated Modifier) created for Yellow Dog Linux
 - YUM rewritten and named DNF
	In CentOS 6 or 7, you would use the YUM command
	In CentOS 8, DNF is the default package manager, but you can still type YUM as the command redirects to DNF
 - Resolves dependencies
 - Has package groups
	A group is a list of software packages that are generally installed together
 - DNF repositories contain RPM software packages
 - Most Red Hat like distributions, such as Fedora and CentOS, use YUM or DNF for installing packages in the RPM package format.
 - Client maintains local list of repositories

DNF Groups
----------
 - DNF groups contain many software packages
 - All software in a group can be installed at once
 - All software in a group can be removed at once
 - Groups can contain optional software
 - Groups make configuring a system quicker

==========

Get DNF packages by name
------------------------

dnf --showduplicates list xfsprogs

DNS Package Selection Options:
 - name
 - name.arch
	short for CPU architecture
	such as .i686 or .x86_64
 - name-ver
 - name-ver-rel
 - name-ver-rel.arch
 - name-epoch:ver-rel.arch

 - We can use package selection options for most DNF operations including install, remove, list.

dnf list --showduplicates xfsprogs-5.0.0-[1-6]*
	Search by glob.

 - If a packager wanted to mark a lower version number as an upgrade, they can tag it with an EPOCH number.

==========

Get info on packages with DNF
-----------------------------

dnf list --all
	List all packages that are in the local RPMDB package database and packages that are listed in a repository.
	--all is not necessary, it's assumed
	First column is the package name with CPU architecture.
	Second column is the version number and release.
	The third column is the repository it came from.
	If the repository is Anaconda, then the package was installed when the OS was.
dnf list --all --showduplicates
	If the package name is green and underlined, it is the current installed version.
	Package names in blue signify that there is an update available.
dnf list --installed
	Get a concise list of installed packages.
dnf list --updates
	List installed packages with available updates.
	These packages would be installed with a dnf upgrade
dnf list --available
	List packages available in the repositories, but are not installed.
dnf list --obseletes
	Packages that were replaced by other packages.
dnf info dnf
	More info on a package, in this example dnf itself.
	Lists the name, version, release, architecture, size, source, repository, license, description,
	 for both the installed version and update.
	This information also mimics the information we get from viewing RPM packages using rpm -qi
dnf deplist dnf
	Show the depency list for a package.

==========

Get info on package groups with DNF
-----------------------------------

 - A package group is a pre-configured collection of packages that can be installed or removed all at one time.

dnf group list
	List all dnf groups
	Older versions of CentOS used grouplist which does the same as modern syntax group list.

 - Available Environment Groups
	Collections of software for OS configurations
	ie. Server with GUI, Server, Minimal Install
 - Installed Environment Groups
	ie. Workstation
 - Installed Groups
 - Available Groups
	Recommended groups
	Includes container management, .NET development, RPM development, and more

dnf group list hidden
	Show groups including those hidden, which were others available during installation

dnf group info "Development Tools"
	Get more info on Development Tools groups.
	Not case sensitive.
	The quotes are requires because it's two words
	Three categories on output: Mandatory Packages, Default Packages, Optional Packages

--with-optional
	Used on installation to install these Optional Packages.

==========

Search for packages with DNF
----------------------------

dnf search vim
	Case insensitive search
dnf search --all vim
	Search everything including metadata
dnf search --all vi*
	We can also use wildcards
dnf provides vim
	Show which packages provide vim, and which version

==========

Install and remove packages with DNF
------------------------------------

sudo dnf install -y tree

sudo dnf install -y epel-release
	Add a third party repository called Extra Packages for Enterprise Linux

sudo dnf reinstall vim
	Reinstall the package, instead of uninstall and install again

sudo dnf install vim --skip-broken
	Install all packages and dependencies that are not broken, in the case of out of sync repos

dnf list updates
	Show packages with available updates

sudo dnf upgrade teamd
	Upgrade/update the package

sudo dnf remove teamd
	Uninstall

sudo dnf autoremove
	Gets rid of any unused dependencies on the entire system.
	We can also specify a package

==========

Install and remove package groups with DNF
------------------------------------------

 - Every DNF group has a group ID in addition to its name

dnf group list ids
	Show all groups and inside parentheses their group ID

sudo dnf group install "Security Tools"
	Specify by group name

sudo dnf group install security-tools
	Specify by group ID

sudo dnf install @"Security Tools"
sudo dnf install @security-tools
	Manage groups with DNF by specifying groups with @

sudo dnf group upgrade security-tools

sudo dnf group remove security-tools

==========

Get package information with RPM
--------------------------------

 - Once a package is installed, the RPM package database is updated with the package information

RPM Query
 - Query the database for a package
 - Query the package
 - Query the database for a file

rpm -qa
	Query the database
	-q = query
	-a = all packages

rpm -qa | sort
	Sort alphabetically

rpm -qi bash
	Query a package (bash in this case)

rpm -qa --last
	Sort package by installation date

rpm -ql bash
	See where all files on a package were installed

rpm -qd bash
	Only show documentation files

rpm -qc bash
	Only show configuration files

rpm -qf /bin/bash
	Shows which package a file came from

rpm -qdf /bin/bash
	Show where the documentation is installed for the /bin/bash command

rpm -q --provides bash
	Query for what this package provides

rpm -q --requires bash
	See what the package requires

rpm -q --changelog bash
	Check changes to package

dnf download --downloaddir ~/packages httpd
	Will not install the package, but instead download to ~/packages

rpm -qip httpd-2.4.53-7.el9.x86_64.rpm
	Query info on a .rpm package (before installing)

rpm -qlp httpd-2.4.53-7.el9.x86_64.rpm
	Get a list of files inside the package and where they'll be installed

rpm --querytags
	Get a list of tags used in RPM packages

rpm -qa --queryformat "%-50{NAME} %-10{VERSION}\n" | sort
	This will show all packages in the system sorted alphabetically and formatted in two columns, including the
	 package version.

rpm -q --queryformat "[%{FILEMODES:perms} %{FILENAMES}\n]" httpd
	Shows all files installed with httpd and their permissions

man rpm
	/QUERY OPTIONS