Chapter 9. Backup, Restore, and Compress Files

Archive files with tar and cpio
-------------------------------

 - In Linux we use an archiver to preserve metadata (permissions, ownership, access control lists) as well as the file data itself.

Linux Archivers
 - cpio - copy in/copy out
 - tar - tape archiver

cpio
----

su -
	Because sudo doesn't work well with pipes, we'll first change to the root user.
find /etc | cpio -ov > etc.cpio
	The find command sends a list of files in /etc including absolute path to cpio, which creates an archive and includes them.
cpio -itvI etc.cpio
	List the files in the etc.cpio archive.
	-i = extract
	-t = list table of contents
	-v = verbose
	-I = specify the cpio archive instead of reading from standard in
cpio -iv --no-absolute-filenames -I etc.cpio
	Extract the archive in current directory.
	This will extract the files where you are, without regard for the absolute file path in the archive.
	Leave the --no-absolute-filenames out to extract and overwrite the files in their original locations.

tar
---

tar Options

Option		Function
-c		Create
-x		Extract
-t		List
-v		Verbose
-p		Preserve permissions
--xattrs	Preserves extended attributes, such as access control list and SELinux security context
-f		File name to use for archive
-C		Changes to different directory before extracting, instead of extracting in current directory

 - tar does not compress archives itself, but has the ability to call external compression tools.

Linux Compression Tools
 - gzip
 - bzip
 - xz

sudo tar --xattrs -cvpf etc.tar /etc

sudo tar --gzip --xattrs -cvpf etc.tar.gz /etc

sudo tar --bzip2 --xattrs -cvpf etc.tar.bz2 /etc
	Smaller archive.

sudo tar --xz --xattrs -cvpf etc.tar.xz /etc
	Smallest archive, takes longer to compress.

tar -tf etc.tar
	List files in tar archive.
tar -tf etc.tar | grep firewall
	Find firewall within archive.

sudo tar --xattrs -xvpf etc.tar
	Extract in current directory.

sudo tar --xattrs -xvpf etc.tar -C /home/user1/Download
	Extract in /home/user1/Download

dd
--

dd syntax:
dd [options] if=<input device> of=<output device>
	The input and output devices can be a range of blocks, a partition, or an entire drive.

dd Options:

Option		Function
bs=		Block size; larger block sizes lower the I/Os necessary to copy a drive
count=		Number of blocks
status=		Command status setting

sudo dd if=/dev/sda of=~/mbr.bin bs=512 count=1 status=progress
	Create a backup of the master boot record.

==========

Compress files
--------------

 - You might want to use a compressor without Tar if you just want to make a file smaller and you were not concerned about metadata like file ownership, permissions, or timestamps.

gzip
----

cp /etc/services .
	copying services to current directory
gzip services
	This will replace existing file with the archive.
	This is different from archivers like Tar that leave the original files intact and create a new archive.
gunzip services.gz
	Decompress file.
	This will remove the archive file completely.

bzip2
-----

bzip2 services
bunzip2 services.bz2

xz
--

xz services
unxz services.xz

 - If you want to archive a directory full of files and directories, use Tar and one of the compressors, as Tar will preserve metadata as well.
 - On Windows, the ZIP archiver is popular, which does a fairly good job of recursively archiving and compressing directories of files.  We can also use ZIP on Linux as well.

zip
---

zip services.zip services
	This will leave the original file in place and create a new archive.
unzip services.zip

==========

Copy files between systems
--------------------------

SCP syntax:
scp [options] <local files> remoteuser@remotehost:remotepath

 - scp uses the authentication and tunnel link functionality of SSH

SSH Options

Option	Function
-P	Remote network port (if not 22)
-p	Preserves permissions
-r	Copies files recursively
-C	Compresses files
-c	Specifies the cipher; Some ciphers require fewer CPU cycles and can speed up a copy
-i	SSH key file

Copy files with SCP

scp /etc/hosts user1@dbhost1:/home/user1/
	Copy local hosts file to remote user1 directory

 - SCP respects file permissions and ownership, so in order to copy the local /etc/hosts file to the remote /home/user1 location, the local user needs to be able to read /etc/hosts and the remote user (user1) needs to be able to write to the /home/user1 directory.

Copy files with SSH (by piping data into it)

cat /etc/hosts | ssh user1@dbhost1 "cat - > /home/user1/hosts"
	cat reads the local hosts file and sends it to the standard in of SSH,
	 which then logs into dbhost1 as user1 and executes the commands between the quotes on the remote machine.
	The cat command on the remote host reads from standard in and redirects the output to /home/user1/hosts
	Essentially, this is doing the same as scp but with more typing.

Duplicate disk with dd and SSH

dd if=/dev/sda | ssh user1@dbhost1 "dd of=/dev/sdb"

 - A simpler, less secure, and faster way of copying a file between two systems is using network cat, or ncat.

On the destination machine run:
ncat -l 8080 > ~/file
		This will start ncat listening on port 8080, and whatever comes into that port will be redirected 
		to ~/file

On the sending machine:
ncat <IP> 8080 --send-only < /etc/hosts

 - ncat provides no security or protection from eavesdroppers, so only use it on a local network.

 - rsync works a lot like the cp command, however instead of blindly copying files, it can compare files and skip them if they exist, or do low level checksums to see if the files are complete or need to be resent.

Rsync syntax
------------

rsync [options] <source> <destination>

rsync *.txt /media/backups	==	cp *.txt /media/backups

rsync -r /etc /media/backups	==	cp -r /etc /media/backups
	rsync recursive syntax
	This will copy the /etc/ directory and all of its files to /media/backups

rsync -r /etc/ /media/backups	==	cp -r /etc/* /media/backups
	The trailing slash makes a different - this will copy the directory's contents recursively without the directory.

Remote rsync Syntax
-------------------

rsync -av --progress -e ssh <local files> <user@remotehost:path>
	-a = archive mode, which includes recursive, permissions, ownership, devices, and timestamps
	-v = verbose
	--progress = show progress output
	-e = specify ssh

 - accessing a system with access control list and SELinux or extended attributes, we can also include --acls, --xattrs, or both.
	rsync -av --progress --acls -e ssh <local files> <user@remotehost:path>
	rsync -av --progress --xattrs -e ssh <local files> <user@remotehost:path>

==========

Chapter 10. Manage Software

Software management systems overview
------------------------------------

 - Linux software repositories contain software packages, as well as an index of what they provide.
 - These indexes and the packages themselves can be cryptographically signed.
 - If the signature is incorrect, meaning it has been compromised, then the Linux package manager will reject it.

Debian					Red Hat					SUSE
Package: .deb				Package: .rpm				package: .rpm
Installer: APT				Installer: DNF				Installer: Zypper
(Advancaed Package Management Tool)

Software Package Contents
-------------------------
 - Binary programs
 - Documentation
 - Configuration files
 - Destination file locations
 - Installation scripts

 - Dependencies will be installed first, then the package.

Compiling from Source
---------------------
 - If binary package is unavailable
 - RPM or DEB packages source
 - Tarball packages source
 - Requires development tools to compile
 - Not recommended

Sandboxed Applications
----------------------
 - Use containers
 - Include all dependencies
 - Different applications can have different library versions
 - Distribution agnostic
 - Packages require more space

 - snapd
 - Flatpak
 - AppImage

snapd
-----
 - Created by Ubuntu
 - Central Snap Store
 - Can have multiple versions of an application simultaneously
 - Can completely replace local packages
 - Support for Ubuntu, Debian, RHEL

Flatpak
-------
 - Not developed by a distribution
 - Decentralized software
 - Addable software remotes
	Equivalent to repos
	FlatHub is the most popular remote and has the most applications
 - Replaces user software, not all software
 - Installed by default on most Linux distros

AppImage
--------
 - Simple - one file per app
 - Download, change permissions, execute
 - Run as regular user
 - Central repository
 - No real installation process

==========

DNF overview
------------

RPM Abilities
-------------
 - Reads list of dependencies
 - Can download from web or FTP servers
 - Does not maintain a list of available software
	RPM does not manage software collections in remote repositories

Dandified YUM Overview
----------------------
 - YUM (Yellow Dog Updated Modifier) created for Yellow Dog Linux
 - YUM rewritten and named DNF
	In CentOS 6 or 7, you would use the YUM command
	In CentOS 8, DNF is the default package manager, but you can still type YUM as the command redirects to DNF
 - Resolves dependencies
 - Has package groups
	A group is a list of software packages that are generally installed together
 - DNF repositories contain RPM software packages
 - Most Red Hat like distributions, such as Fedora and CentOS, use YUM or DNF for installing packages in the RPM package format.
 - Client maintains local list of repositories

DNF Groups
----------
 - DNF groups contain many software packages
 - All software in a group can be installed at once
 - All software in a group can be removed at once
 - Groups can contain optional software
 - Groups make configuring a system quicker

==========

Get DNF packages by name
------------------------

dnf --showduplicates list xfsprogs

DNS Package Selection Options:
 - name
 - name.arch
	short for CPU architecture
	such as .i686 or .x86_64
 - name-ver
 - name-ver-rel
 - name-ver-rel.arch
 - name-epoch:ver-rel.arch

 - We can use package selection options for most DNF operations including install, remove, list.

dnf list --showduplicates xfsprogs-5.0.0-[1-6]*
	Search by glob.

 - If a packager wanted to mark a lower version number as an upgrade, they can tag it with an EPOCH number.

==========

Get info on packages with DNF
-----------------------------

dnf list --all
	List all packages that are in the local RPMDB package database and packages that are listed in a repository.
	--all is not necessary, it's assumed
	First column is the package name with CPU architecture.
	Second column is the version number and release.
	The third column is the repository it came from.
	If the repository is Anaconda, then the package was installed when the OS was.
dnf list --all --showduplicates
	If the package name is green and underlined, it is the current installed version.
	Package names in blue signify that there is an update available.
dnf list --installed
	Get a concise list of installed packages.
dnf list --updates
	List installed packages with available updates.
	These packages would be installed with a dnf upgrade
dnf list --available
	List packages available in the repositories, but are not installed.
dnf list --obseletes
	Packages that were replaced by other packages.
dnf info dnf
	More info on a package, in this example dnf itself.
	Lists the name, version, release, architecture, size, source, repository, license, description,
	 for both the installed version and update.
	This information also mimics the information we get from viewing RPM packages using rpm -qi
dnf deplist dnf
	Show the depency list for a package.

==========

Get info on package groups with DNF
-----------------------------------

 - A package group is a pre-configured collection of packages that can be installed or removed all at one time.

dnf group list
	List all dnf groups
	Older versions of CentOS used grouplist which does the same as modern syntax group list.

 - Available Environment Groups
	Collections of software for OS configurations
	ie. Server with GUI, Server, Minimal Install
 - Installed Environment Groups
	ie. Workstation
 - Installed Groups
 - Available Groups
	Recommended groups
	Includes container management, .NET development, RPM development, and more

dnf group list hidden
	Show groups including those hidden, which were others available during installation

dnf group info "Development Tools"
	Get more info on Development Tools groups.
	Not case sensitive.
	The quotes are requires because it's two words
	Three categories on output: Mandatory Packages, Default Packages, Optional Packages

--with-optional
	Used on installation to install these Optional Packages.

==========

Search for packages with DNF
----------------------------

dnf search vim
	Case insensitive search
dnf search --all vim
	Search everything including metadata
dnf search --all vi*
	We can also use wildcards
dnf provides vim
	Show which packages provide vim, and which version

==========

Install and remove packages with DNF
------------------------------------

sudo dnf install -y tree

sudo dnf install -y epel-release
	Add a third party repository called Extra Packages for Enterprise Linux

sudo dnf reinstall vim
	Reinstall the package, instead of uninstall and install again

sudo dnf install vim --skip-broken
	Install all packages and dependencies that are not broken, in the case of out of sync repos

dnf list updates
	Show packages with available updates

sudo dnf upgrade teamd
	Upgrade/update the package

sudo dnf remove teamd
	Uninstall

sudo dnf autoremove
	Gets rid of any unused dependencies on the entire system.
	We can also specify a package

==========

Install and remove package groups with DNF
------------------------------------------

 - Every DNF group has a group ID in addition to its name

dnf group list ids
	Show all groups and inside parentheses their group ID

sudo dnf group install "Security Tools"
	Specify by group name

sudo dnf group install security-tools
	Specify by group ID

sudo dnf install @"Security Tools"
sudo dnf install @security-tools
	Manage groups with DNF by specifying groups with @

sudo dnf group upgrade security-tools

sudo dnf group remove security-tools

==========

Get package information with RPM
--------------------------------

 - Once a package is installed, the RPM package database is updated with the package information

RPM Query
 - Query the database for a package
 - Query the package
 - Query the database for a file

rpm -qa
	Query the database
	-q = query
	-a = all packages

rpm -qa | sort
	Sort alphabetically

rpm -qi bash
	Query a package (bash in this case)

rpm -qa --last
	Sort package by installation date

rpm -ql bash
	See where all files on a package were installed

rpm -qd bash
	Only show documentation files

rpm -qc bash
	Only show configuration files

rpm -qf /bin/bash
	Shows which package a file came from

rpm -qdf /bin/bash
	Show where the documentation is installed for the /bin/bash command

rpm -q --provides bash
	Query for what this package provides

rpm -q --requires bash
	See what the package requires

rpm -q --changelog bash
	Check changes to package

dnf download --downloaddir ~/packages httpd
	Will not install the package, but instead download to ~/packages

rpm -qip httpd-2.4.53-7.el9.x86_64.rpm
	Query info on a .rpm package (before installing)

rpm -qlp httpd-2.4.53-7.el9.x86_64.rpm
	Get a list of files inside the package and where they'll be installed

rpm --querytags
	Get a list of tags used in RPM packages

rpm -qa --queryformat "%-50{NAME} %-10{VERSION}\n" | sort
	This will show all packages in the system sorted alphabetically and formatted in two columns, including the
	 package version.

rpm -q --queryformat "[%{FILEMODES:perms} %{FILENAMES}\n]" httpd
	Shows all files installed with httpd and their permissions

man rpm
	/QUERY OPTIONS

==========

Manage DNF repositories
-----------------------

 - DNF repository configuration information is stored in /etc/yum.repos.d
	This is a directory, not a file
 - All repository files in this directory have to end in .repo

[baseos]
	Each repository name is in square brackets
name=Rocky Linux $releasever - BaseOS
	Descriptive name of the repository
mirrorlist=https://mirrors.rockylinux.org/mirrorlist?arch=$basearch&repo=BaseOS-$releasever$rltype
	The list of repository mirrors
	DNF will try to find the fastest mirror to use
#baseurl=http://dl.rockylinux.org/$contentdir/$releasever/BaseOS/$basesearch/os/
	This line is commented out
	If there was not a mirror list, then the repository would have a static line with the URL to the repo
gpgcheck=1
	0 turn off gpg signature checking, 1 turns it on
enabled=1
	If the repo is enabled
countme=1
	Help repository maintainers differentiate between short-lived installations and real servers in order 
	 to better gauge traffic
metadata_expire=6h
	metadata expiration time
	DNF caches metadata about repository packages and needs to be refreshed every so often
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-Rocky-9
	The gpg key file used to ensure packages from this repository haven't been tampered with

dnf repolist
	List enabled repos with 2 columns: repo id and repo name
dnf repolist -v
	Verbose mode to show more info
	Provides the same info as the repo info command
dnf repolist --disabled
	Show disabled repos

 - To enable a repo you could either edit the .repo file, or a faster way it to use the config-manager sub command

sudo dnf config-manager --set-enabled baseos-source
	Enable the repo
sudo dnf config-manager --set-disabled baseos-source
	Disable the repo

dnf --enablerepo=epel install <package>
	Enable a repository while installing a package
	Without enabling it permanently
dnf --disablerep=epel install <package>
	Disable a repo while installing packages
	You might want to do this if you wanted to install a package out of the baseos repository instead of the 
	 updated version in the epel repository

 - Some additional repositories can be added as simply as installing a package

sudo dnf install epel-release
	Install epel repository

rpm -ql epel-release
	List the contents of this package using rpm

dnf config-manager --add-repo <repository_URL>
	Add a repository by URL

dnf repository-packages epel list --all
	List all packages from a repository

 - Be careful when adding external repositories
 - If you add a repository with malware in it, your system may become infected
 - Try to stick with the main repositories if you can

==========

Manage OS updates
-----------------

dnf check-update
	Shows all software packages that need updating
	Indented packages have been obseleted
dnf list --obsoletes
	Only show obseleted packages
sudo dnf upgrade grub2-tools
	Upgrade a specific package and it's dependencies
sudo dnf upgrade
	Upgrade the entire operating system
sudo dnf upgrade -x kernel*
	Upgrade everything except for the kernel

 - If you want to permanently hold back some packages from being upgraded, you can install the dnf version lock plugin.

sudo dnf install python3-dnf-plugin-versionlock

dnf-list --showduplicates kernel
	Show available kernel updates

sudo dnf versionlock add kernel-4.18.0-193-el8
	To lock the current kernel, you could just use the name kernel

dnf versionlock list
	Show list of version lock packages

sudo dnf versionlock delete kernel-4.18.0-193-el8.*
	Delete a version lock

sudo dnf versionlock clear
	Clear all version locks

sudo dnf upgrade --security
	Only install security updates

 - Configuration files may be renamed when a new package is installed

Preserving Configuration Files:
 - Unmodified configuration file:
	- Config file is overwritten
 - Modified configuration file:
	- Modified config file is saved with .rpmsave or .rpmorig extension
	- New config file is saved from the package
 - Modified configuration file and noreplace label in package:
	- New config file is saved with .rpmnew extension, and the original config is left in place

dnf changelog kernel
	View change log

dnf changelog --upgrades
	Show change log of available upgrades

==========

Update the kernel
-----------------

 - Installing kernels can be as easy as running a system update and rebooting

dnf list kernel
	List our currently installed kernel
	Items that are bold belong to our current kernel and include the kernel itself along with modules and tools

Kernel Naming Conventions:

kernel.x86_64	4.18.0-193.el8
	4 = major version
	18 = major revision
	0 = kernel patch
	193 = red hat release
	el8 = built for enterprise Linux 8
	x86_64 = 64 bit CPUs

 - Installed kernels reside in /boot
 - The kernels are named vmlinuz
 - We also have ram disc images for booting and configuration files

uname -r
	This shows the exact kernel release that's currently running

 - Grub bootloader files are stored in /boot/grub2
 - The configuration file for BIOS based systems is /boot/grub2/grub.cfg
 - Do not edit these files as they get overwritten on kernel updates
 - If you want to modify the way Linux boots, edit /etc/default/grub
 - After you've made changes to this file and saved them, you'll need to run grub2-mkconfig

sudo grub2-mkconfig
	This takes the grub2 configuration files and updates the boot loader code
	This is ran automatically whenever we install a new kernel

 - If you have a UEFI system, the boot loader config is stored in /boot/efi/EFI/centos/grub.cfg
	Or replace centos with redhat. This may change depending on the OS.

dnf list --available kernel
	Check for kernel updates
sudo dnf upgrade kernel
	Update kernel

 - There's a workaround with DNF that will allow you to preserve a certain number of packages of the same name
 - This is a configuration item in tje /etc/dnf/dnf.conf file called --latest-limit

sudo dnf remove $(dnf repoquery --installonly --latest-limit=-2 -q)
	Uninstall all but the last 2 kernels
	This uses dnf repoquery to get a list of kernels further back than 2, and then passes that list to dnf to
	 remove.

 - To set the default boot kernel to another kernel use the grub2-set-default command.
 - The indexing starts with 0 so the newest kernel would be 0 and one kernel older would be 1, and so on.

sudo grub2-set-default 1
	Set default kernel to one.

 - Once you've set the default kernel, you'll need to update the grub config.

sudo grub2-mkconfig
	Update the grub config
	Now, if you reboot your system it would come up in the second kernel


==========

Manage kernel modules
---------------------

 - Linux has modules that have to match the kernel version
 - These modules add functionality to the kernel which could include file systems and device drivers
 - These modules are stores in /lib/modules for 32-bit kernels, and /lib/64 for 64-bit kernels.

ls /lib/modules/$(uname -r)/kernel
	The dollar sign and parentheses around uname -r will execute that command, and the result will be inserted
	 into its place.
	This is an easy way of inserting the current kernel version into the path without having to look it up.

lsmod
	See currently loaded modules

modinfo dm_mirror
	Show detailed info on a module

sudo modprobe -vr dm_mirror
	Remove a module and it's dependencies (dn_mirror in this case)

sudo modprobe -v dm_mirror
	Load a module and it's dependencies

 - Some modules take parameters as well

 - If hardware is local, we can make Linux scan for it using the depmod command

sudo depmod -v
	Tell us which modules are needed by HW or by other modules

 - In order to have modules load automatically at boot, we need to create a file in /etc/modules-load.d and include the module name.

sudo vi /etc/modules-load.d/dm_mirror.conf
	Create module, must end in .conf
	add a line:
		dm_mirror
	Save and exit
	Now it will be loaded in boot

 - If you need to make sure a module is not loaded at boot, make a file in /etc/modprobe.d
 - This is called blacklisting the module.

sudo vi /etc/modprobe.d/ctxfi.conf
	Blacklist the snd-ctxfi driver for an old sound blaster audio card
	Name of the file doesn't matter
	add line:
	blacklist snd-ctxfi

 - It's rare that we manage modules manually this way, but it's still a skill worth having.

==========

Get package information with dpgk and APT
-----------------------------------------

Debian Package Tools
 - dpkg
	The low level command for managing packages (debian package)
	Equivalent to rpm to Red Hat
 - APT
	The repository based package management system
	Equivalent to YUM or DNF on Red Hat

 - apt-get and apt-cache are powerful and still work to query and install packages.
 - However, the newer tool is simply called apt and provides a more user-friendly experience.

Query with apt
 - apt search <package name>
	Shows all packages and shows if they are installed or not
 - apt show < package name>
	Shows package details
 - apt list <package name> [criteria]
	List packages based on criteria, such as installed or upgradable

sudo apt search whois
	This searches the package names, as well as the description and files included in the package

sudo apt info whois
	Show install size, version, description, dependencies, bug contact

sudo apt list --installed whois
	Will only print out of it's installed

sudo apt list whois
	Show available packages

sudo apt install whois
	Will only prompt y/n if there were dependencies to install too

 - Just as there are package groups in YUM, Debian uses virtual packages, which are empty packages with a list of install requirements.
 - If we install a virtual package, it will install all of its dependencies too

sudo apt info apache
	Will return a message that apache is a package (virtual) and so we can't get information on it

apt-get download whois
	Download but not install package (.deb)

sudo dpkg --info whois_5.4.2_amd64.deb
	Works on local packages only

sudo dpkg -c whois
	Show which files will be installed

sudo dpkg -i whois_5.4.2_amd64.deb
	Install the package

sudo dpkg -L whois
	Ask the package database to list the files
	We are not using the software package name, but rather the name of the application

sudo dpkg -S /usr/bin/whois
	Ask the package database which package a file in the file system belongs to
	We can do this with any file in the file system that was installed by dpkg or apt

==========

Manage software with dpgk and APT
---------------------------------

sudo apt install apache2

sudo apt info apache2
	See that it's installed, what it provides (httpd, httpd-cgi), and a list of dependencies
	Suggested packages

sudo apt list --upgradable
	Show updatable software packages
	If this is empty, you may want to update the indexes of available software

sudo apt update
	Update the indexes of available software

sudo apt install --only-upgrade snapd
	Upgrade a package (snapd in this case)

sudo apt remove apache2
	Uninstall the package, but doesn't automatically remove the dependencies

sudo apt autoremove
	Remove packages no longer needed

 - You can also use dpkg to remove packages.
 - However, dpkg does not manage dependencies.
 - This works fine for simpler jobs, but for uninstalling complex depednecy trees it may fail, and you will need to use apt.

sudo dpkg -r rsync
	"dependency problem - not removing"

 - When you uninstall a package it leaves behind the configuration files.
 - If you want to remove the package and its configuration files, use apt purge

sudo apt purge apache2

sudo apt full-upgrade
	Upgrade the entire distribution to a newer version (as opposed to just updating packages within the
	 distribution version)
	This is the same as apt-get dist-upgrade

==========

Work with APT repositories
--------------------------

Ubuntu Repository Section Names
 - Main
	Software supported by Ubuntu
 - Universe
	Open source community software
 - Restricted
	Closed source drivers
 - Multiverse
	Proprietary or non-open source software

 - Names may vary on different Debian based distributions.
 - For each of these sections, there are channels as well.

Ubuntu Repository Channel Names
 - release
	The standard channel, which contains software as it was released without updates
 - release-updates
	Updates to packages
 - release-security
	Security updates to existing versions
 - release-backports
	Packages that have been back ported to the current OS
 - devel
	Development software that will most likely have bugs

 - Ubuntu and other Debian based distributions will have OS version specific repositories and mirrors for them.

Ubuntu Releases
 - 18.10 Cosmic Cuttlefish
 - 19.04 Disco Dingo
 - 20.04 Focal Fossa
 - 22.04 Jammy Jellyfish

 - First section is the year (22 = 2022), and the last section is the month (04 = April).
 - Debian has a fairly complex versioning system.  For instance, you may have a package for Ubuntu 22.04 that belongs to release-update; Since it's an update file that has a restrictive license it also belongs to the multiverse channel; Lastly, it may be compiled for 32-bit CPUs.
 - In additional, we may choose a different mirror that will be faster for us.
 - All of this information for each repository channel is stored in one line of a configuration file.

Example repository source line:
deb [arch=i386] https://example.io/SuperEditor/updates/release-update multiverse

Repository Configuration Locations:
 - /etc/apt/sources.list
 - /etc/apt/sources.list.d/*
	Directory

apt policy
	Look at repositories

 - You can also look at these files directly using grep

grep '^deb' /etc/apt/sources.list /etc/apt/sources.list.d/*
	This shows only lines that starts with word deb in both the sources.list file and the sources.list.d
	 directory.

 - You can add repositories from the command line by editing the sources.list file manually and pasting in the apt line.
 - Or you can download a repo file into the sources.list.d directory.
 - Deleting the repositories can also be done by just commenting out the line or deleting it using a text editor.
 - apt also includes a couple of commands to help with this process.
 - You'll need the curl command to download the GPG key.

sudo apt install curl

curl -sL https://packagecloud.io/AtomEditor/atom/gpgkey | sudo apt-key add -
	- for standard in

 - This method of adding GPG keys still works but it is being replaced by simply storing the keys in /etc/app/trusted.gpg.d

curl -sL https://packagecloud.io/AtomEditor/atom/gpgkey | sudo tee /etc/apt/trusted.gpg.d/AtomEditor.asc

 - Now add the repostiroy.

sudo add-apt-repository -S deb [arch=amd64] https://packagecloud.io/AtomEditor/atom/any/ any main
	This will force an apt update of the repository data

sudo add-apt-repository -r deb [arch=amd64] https://packagecloud.io/AtomEditor/atom/any/ any main
	Remove the repository

 - Another way to add a third party repository is through PPA (personal package archive).
 - A PPA is usually a very focused repository run by the authors of the software, although it doesn't have to be.

sudo add-apt-repository ppa:libreoffice/ppa

 - If you installed software from this repository and then deleted the repository, there won't be any updates to that software.
 - You can remove the repository the same way you added it by adding --remove
 - There's a note in the output that says if you want to remove all packages from the repository to install ppa-purge.

sudo apt install ppa-purge

sudo ppa-purge ppa:libreoffice/ppa
	If we had installed packages from the repository, it will remove them as well

==========

Install software from source
----------------------------

 - First, make sure that you have the necessary development tools installed.

sudo dnf group install -y "Development tools"

 - We are going to install git from source code.  You will also want to install lubcurl-devel so Git can connect to external HTTPS repositories.

sudo dnf install libcurl-devel

tar -xzvpf git-2.39.0.tar.gz
	Extract archive

cd git-2.39.0/

ls

make configure
	Creates a config file based on our system
	That script will be different depending on your OS, hardware config, etc.

./configure --prefix=/usr/local
	Run the configure script that make created
	The --prefix defines the location for the binary file

sudo make install
	Compiles source code that may take a few moments, then installs it

/usr/local/bin/git --version

==========

About sandboxed applications
----------------------------

 - Sandboxes software utilizes operating system containers to include all dependencies in one downloadable distribution-agnostic file.

Linux Package Managers

		Debian		.deb		dpkg		APT
Linux Source	Red Hat		.rpm		rpm		dnf
		Slackware	.tar.gz		installpkg	slackpkg

Sandboxes Applications

System		Focus
snapd		Designed to replace package managers
Flatpak		Designed for user applications
AppImage	One file per application

snapd
 - A project created by the developers of Ubuntu
 - Installed or at least installable on Ubuntu >= 18.04, and RHEL >= 7.6.

sudo dnf install snapd

sudo systemctl enable --now snapd.socket
	Enable the snapd communication socket

 - snapd comes with a central package repository, and it's already configured, so we can jump straight into finding applications.

snap find ascii-clock
	Find the available versions of the package ascii-clock.

snap info ascii-clock

snap install ascii-clock

df -h
	snap applications are mounted on a loopback device
	The container's file system is made available via this system
	/dev/loop0	117M	117M	0	100%	/var/lib/snapd/snap/core/14399
	/dev/loop1	9.5M	9.5M	0	100%	/var/lib/snapd/snap/ascii-clock/36

snap list
	List installed snap programs

snap find
	Only shows about ~32 recommended applications, not all

cat /var/cache/snapd/names
	Look at snapd cache for complete list

snap refresh asci--clock
	Update snap packages

snap revert ascii-clock
	Revert to previous version

snap remove ascii-clock

Flatpak
 - Flatpak apps run in a sandbox by default.
 - Flatpak is a decentralized system, meaning you can obtain packages from several repos, or what Flatpak calls remotes.
 - By default there is not a remote installed.
 - Flathub is the most popular remote and has the most applications.

sudo dnf install flatpak

flatpak remotes
	List installed remotes

sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

flatpak search gimp

flatpak install org.gimp.GIMP

flatpak info org.gimp.GIMP

https://flathub.org/apps/category/All
	View all available apps

flatpak update org.gimp.GIMP

flatpak list
	List installed apps

flatpak run org.gimp.GIMP
	Run a flatpak application

 - If you choose to launch a Flatpak application from the command line, it may be worth your time to create aliases for each.
 - For instance, you could crease an alias in the ~/bashrc file called GIMP that runs the GIMP Flatpak.
	alias gimp='flatpak run org.gimp.GIMP'

flatpak uninstall org.gimp.GIMP

AppImage
 - https://appimagehub.com
 - Download .AppImage
 - Make file executable
 - To delete, just delete the file.