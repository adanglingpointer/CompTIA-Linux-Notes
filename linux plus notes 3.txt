Linux storage system overview
-----------------------------

Types of Storage
 - File storage
 - Block storage
 - Object storage

File Storage
 - Hierarchy of files in folders
 - Data in files
 - Metadata contains path to file
 - Local file systems
 - Network file systems - NFS (Network File System), CIF (Windows Common Internet Filesystem)

Block Storage
 - Exposes blocks of binary data
 - Blocks have unique identifiers
 - Storage system reassembles blocks
 - Storage area networks (iSCSI)

Object Storage
 - Manages data
 - Links data to associated metadata
 - Data is stored in discrete objects
 - Single repository
 - Red Hat Ceph

ATA Drives
 - local drives in a legacy system
 - Parallel ATA drive with a flexible ribbon cable with 80 wires
 - Two drives per cable
	To have more than two drives, a system needs multiple controllers
 - Speed: 133 MB/sec
 - /dev/hda, hdb

SCSI Drives
 - Small Computer System Interface
 - higher end legacy systems
 - Parallel SCSI drive with larger flat ribbon cable with 168 wires, used mostly for servers
 - 16 drives per cable
 - Speed: 320 MB/sec
 - /dev/sda, sdb

SATA Drives
 - newer systems
 - Serial ATA with narrow serial cable
 - One drive per cable
	Can be a spinning disk, or a Solid State Drive
 - we measure serial interfaces with Bits per second instead of Bytes
 - Speed: 6 Gbps
 - /dev/sda, sdb

SAS Drives
 - Serial Attached SCSI
 - Parallel SCSI was replaced by Serial Attached SCSI (SAS)
 - Backward compatible with SATA
 - Speed: 12 Gbps
 - /dev/sda, sdb

NVMe Drives
 - Non-Volatile Memory Express
 - no cable at all, plugs into slot like a memory stick
 - The structure of the internal components is very similar to a solid state SATA drive,
	the only difference being the interfaces direct via a PCI Express bus
 - Speed: 32 Gbps
 - /dev/nvme0n1p1
	nvme followed by device number, namespace number, and partition number

USB Drives
 - Thumb drive
 - SSD in USB case
 - Speed: 5-20 Gbps
 - /dev/sda, sdb

Partitioning the drive = divide drive into smaller, more manageable sections
OS	Users	Data

 - Older BIOS space systems can only have 4 primary partitions with a maximum size of 2 TB
	A later trick was developed to allow one of the four partitions to be made into an extended partition,
	 and then divided again into a maximum of 12 logical drives.
 - The BIOS partition table is stores in the master boot record in the first sector of the drive
 - BIOS was replaced by the Unified Extensible Firmware Interface (UEFI)
 - One of the improvements was the GUID Partition Table (GPT) which supports up to 128 partitions
	with a total capacity of 9.4 Zetabytes (ZB)(9.4 billion Terabytes)

 - Linux has the additional ability to combine partitions and drives into volume groups,
	and divide the resulting group into smaller logical volumes
 - This is called LVM

[Part 1]		[Part 2]		[Part 3]
↓			↓			↓
			[Volume Group]
↓			↓			↓
[Logical Volume]	[Logical Volume]	[Logical Volume]

 - New drives can be added to the volume group allowing you to increase the size of the logical volume without
	taking it offline.
 - Each logical volume acts as a flexible partitions.
 - It also allows you to swap drives from underneath the logical volumes while they're being used.
 - Unlike partitions, space utilized for logical volumes does not need to be continuous.

 - Drives can also be combined into a RAID (Redundant array of independent disks)

[Drive 1]	[Drive 2]
↓		↓
	[/dev/sda]

 - RAID can be accomplished on Linux using LVM or the mdadmin tool

 - Drives, partitions, logical volumes, and RAID devices can be combined in many different ways to solve your
	storage needs.

[Drive 1]	[Drive 2]	[Drive 3]	[Drive 1]	[Drive 2]	[Drive 3]
↓		↓		↓			↓		↓		↓
		[/dev/sda]					[/dev/sdb]
		↓							↓
				[Volume Group]
				↓
				[Logical Volume]
				↓
				[EXT4]

 - The resulting device could be encrypted using LUKS for security [LUKS Encrypted Volume] (instead of EXT4),
	or just formatted with a file system mounted on a directory to allow access
	 [ext4 - /media/storage]

Linux File Systems (current)
 - ext4
 - XFS
 - Btrfs

Legacy Linux File Systems
 - ext2
 - ext3
	Added journal
 - Maximum file size: 2 TB
 - Maximum file system size: 16 TB

ext4 File System
 - Supports SSDs
 - Maximum file size: 16 TiB
 - Maximum file system size: 1 EiB (1 billion Gigabytes)
 - ext2/ext3 can migrate to ext4 without reformatting

FXS File System
 - Default on Enterprise Linux from version 7
 - 64-bit file system
 - Created by Silicon Graphics for Unix
 - Maximum file system size: 8 EiB

Btrfs File System (pronounced butter FS)
 - Created as a response to Sun Microsystems ZFS
 - Supports:
	- Partitioning
	- RAID
	- Logical volumes
	- Snapshots
	- Compression
 - Maximum file size: 16 EiB

 - When it comes to virtual memory, instead of using a page file stored on disk, Linux by default uses an
	entire partition
 - This provides a faster virtual memory interface that is not subject to fragmentation,
	but does require a separate partition or logical volume.

Specialty File Systems
 - Enterprise Cryptographic File System (eCryptfs)
	Applies POSIX-compatible encryption protocols to data before it's written to disk

Non-Linux File Systems (supported by Linux)
 - VFAT/exFAT (Microsoft)
 - NTFS (Microsoft)
 - HFS/HFS+ (Apple)
 - ISO 9660/UDF (optical disks)
 - ZFS (Sun Microsystems)

 - There are licensing issues with some of these file systems, restricting them from being included in the kernel.
 - They're handled in user space directly or through the FUSE file system, which acts as a bridge between the 
	kernel and user-created file systems

Kernel Space		User Space
[Kernel]	↔	[FUSE]↔[ZFS]

Remote File Systems (supported by Linux)
 - SMB (Windows)
 - CIFS (Windows)
 - NFS (UNIX)

==========

Prepare for handling storage
----------------------------

To practice in VirtualBox

 - Shut down VM
 - Settings
 - Storage
 - Right click Controller: SATA
 - Hard Disk
 - Create
 - Keep default of VDI
 - For storage type keep default of dynamically allocated so it doesn't take up extra disk space
 - For LVM and RAID exercises, you need a lot of drives, but they don't need to be very large so change the size
	to 1 GB
 - Also take note of the virtual disk name, i.e. rhhost1_1.vdi
 - Click Finish
 - Click Choose to attach to VM
 - Create 3 more drives the same way, incrementing the name for each one
 - Power VM back up again

==========

Create partitions using fdisk
-----------------------------

cat /proc/partitions
	get a list of drives and partitions that the kernel recognizes, comes from the kernel directly
lsblk
	list block devices
	gives a visual list of the drives and their partitions or logical volumes
sudo blkid
	list partition labels and UUID numbers
	it also shows which file system the drive is formatted with
sudo fdisk -l
	read the partition table from the drive directly
sudo fdisk -l /dev/sda
	list partitions on only one drive

 - fdisk is getting the data directly from the drive's partition table
 - /proc/partitions lists the partitions that the kernel recognizes, and is stored in RAM
 - In some cases, if you modify a drive's partition, the kernel may not update it's partition table because the
	drive is locked by a process, or because one of its partitions is mounted.
	If possible, unmount the partition and then use partprobe to update the partition table.

sudo partprobe
	update the partition table
	then check /proc/partition again
	if this still doesn't match fdisk, you may have to reboot

 - Legacy systems use a BIOS to boot the machine (rather than UEFI and GUID partition table)
 - BIOS stores its partition table in the MBR - master boot record
 - Although fdisk supports GUID partitions now, older versions did not, so to edit partitions you had to use gdisk
 - Everything we do here in fdisk can be done in gdisk as the interface is virtually the same

sudo fdisk /dev/sdb
	edit the partitions on /dev/sdb
	if no partition table is found, a new DOS partition table is created (old BIOS style partition table)
m
	help menu
d
	delete a partition
n
	create a new partition
p
	print partition table
t
	change a partition type
w
	write partition table to disk and exit
q
	quit without saving changes
g
	create a new GPT partition table
	this is desirable unless you're on a legacy system with BIOS

g
n
1
2048
+500M
	create a 500MB partition and leave the rest of the disk free
p
	print partition table to verify
w
	write and exit

sudo udevadm settle
	register the partition to let the kernel know it has changed
cat /prov/partitions
	verify the kernel recognizes the new partition

 - Once you've created partitions, you can use them in LVM or format them directly using tools such as mkfs
 - Once you have formatted it, you can mount it

