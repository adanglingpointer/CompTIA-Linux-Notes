15. Automation and Scripting
============================

What makes a shell script a shell script?
-----------------------------------------

vi ~/script.sh
	The file extension tells VI to do syntax highlighting

 - We need to make the first line point to the shell interpreter.
 - We can do this by pointing it directly at the interpreter using an absolute path.

#!/bin/bash
 - In this case we're specifying an absolute path to the bash interpreter executable
 - We can also use a second form:

#!/usr/bin/env bash
 - In this case, we use the ENV command to search the system path for the bash interpreter and execute it there.
 - The advantage is that it could be in a different location and it will still work.

echo "This is a shell script"

 - Save the script, then change the permissions to make it executable.

chmod u+x script.sh
 - This step allows us to execute our script as if it were a command.

 - The last thing we would do to make it seamless is to put our command in the system path.
 - When a user logs in, a directory is added to the system path specifically for that user:
	~/bin
 - We need to create this directory first.

mkdir ~/bin

mv script.sh ~/bin

 - Now we can execute any script in this directory by calling its name without a path.

script.sh
	"This is a shell script"

 - You can name your scripts without the .sh extension to make them seem more like system commands.
 - Or create symbolic links to them without the extension.
 - None of these steps are actually required to run a text file as a shell script.

echo 'echo this is a shell script' > ~/bin/script2.sh
bash ~/bin/script2.sh
 - It runs even without execute permissions or a line indicating the desired interpreter.

==========

Positional arguments
--------------------

cd ~/bin
ls *
 - ls expands the asterisk to show all files

ls debugger.sh script.sh
 - We've passed two arguments

vi posargs.sh

//code example

#!/bin/bash

echo '$0 is' "$0"
echo '$1 is' "$1"
echo '$2 is' "$2"
echo '$@ is' "$@"
echo '$* is' "$*"

 - We use the single quotes so the first variables on the line will not be processed and the literal names will be printed on the screen.
 - The second variable on the line is double quoted which preserves space, but allows variables to be expanded.

chmod u+x posargs.sh
posargs.sh
	$0 is /home/user1/bin/posargs.sh
	$1 is
	$2 is
	$@ is
	$* is
posargs.sh dog cat horse
	$0 is /home/user1/bin/posargs.sh
	$1 is dog
	$2 is cat
	$@ is dog cat horse
	$* is dog cat horse

 - $0 is the path to the script
 - $1 is the first argument
 - $2 is the second argument
 - $@ is all arguments
	- contains word split items, each one essentially quotes
	- if we were to loop through $@ it would iterate three times as each items is a separate thing
 - $* is all arguments
	- contains one thing, all arguments as one entity
	- if we were to loop through all items in $* it would iterate once as it appears as one item

==========

File globbing
-------------

Pattern matching is bash
 - globs
 - extended globs
 - brace expansion
 - basic regular expressions
 - extended regular expressions

What are globs?
 - Originally in Bell Labs Unix, there was a command called glob that expanded wildcard characters into a list of unrooted arguments.
 - /etc/glob
 - Globbing is now a function built into the shell.
 - Globbing support depends on shell type/version
	- Bash shell options may affect how globs work as well
 - Globs are a set of bash features that match or expand certain types of patterns
 - Globs can look and act like regular expressions, but are less expressive and are easier to use.
 - They're also easier for the system to process as well.
 - Don't confuse globs and regular expressions.
 - Globs match file names, whereas regular expressions match text.
 - Sometimes this functionality can look blurred depending on how you're using it.

Using a glob with ls
	ls [0-9]?file*.txt
		- This would get all files starting with the number 0 through 9, followed by one character of any
		 type, and then the world 'file', followed by any number of characters of any type, and finally
		 ending with txt.
		ls 1_file-rev1.txt 2_file-rev1.txt 3_file-rev1.txt
 - This process is being handled by the shell, and the LS command is unaware of it.

Globs and regular expressions
	grep '^A.*\.txt' file1.txt file2.txt

Bash globbing options
 - nocaseglob
 - nocasematch
 - nullglob
 - globstar
 - extglob

Globs vs Regular Expressions
 - Glob:
	[0-9]?file*.txt
 - Regular expressions:
	[0-9].file.*.txt

 - To use a regular expression to do the same job, we need to use a command that has regular expression support built-in, such as grep.
 - LS does not support regular expressions.

Using a regex with ls
	ls [0-9]?file*.txt
	ls | grep '[0-9].file.*\.txt'

 - We'd still list the files in the directory with the LS command, and then pipe the resulting text to grep, which would then use a regular expression to match the text.

==========

Wildcards
---------

 - One of the reasons that manipulating files on the command line can be faster and more efficient than the GUI is file globbing.
 - File globbing uses patterns containing wildcard to match files based on their names.
 - File globbing - The process of expanding a nonspecifric file name containing wildcard characters in specific file names.
 - For instance, if you wanted to list all file names starting with the word 'file' followed by an extension uou could use:
	ls file*
 - This glob can be used with any command as the globbing is handled by the shell itself.

Asterisk (*)
 - Matches zero or more of any type of character.
 - It matches everything and nothing.
	`ls file*` would match 'file.txt' as well as 'file'

Question mark (?)
 - Matches one of any character
	file?.txt will match file1.txt and filea.txt
	file??.txt will match file00.txt and fileab.txt

Character set []
 - Matches one character in list
	file[123].txt will match file1.txt, file2.txt, and file3.txt
 - You can also match a range of character
	file[1-3].txt will match file1.txt, file2.txt, and file3.txt
	file[a-z].txt will match filea.txt, fileb.txt, filec.txt, ...
	file[A-Z].txt will match fileA.txt, fileB.txt, fileC.txt, ...
	It is not advised to mix uppercase and lowercase, ie. file[a-Z].txt, as the results may vary,
	 instead use `file[a-zA-Z].txt
	file[a-zA-Z].txt will match filea.txt, fileB.txt, ...
 - You can also combine ranges with lists
	file[0-9abc].txt will match file0.txt, filea.txt, ...
 - If you want to match the hyphen itself then you need to include the hyphen at the beginning or end of the list of characters in the set
	file[-0-9].txt will match file-,txt, file1.txt, file2.txt, ...

Character set [! ]
 - [! ] negates the match
 - [^ ] negates the match
	file[!0-9].txt will match filea.txt, fileb.txt, ...

Man page on globbing:
	man 7 glob

==========

Bash variable scope
-------------------

 - Environmental variables
	- The entire OS can see
	- These variables are set in the system when it starts
	- Changes to this environment can be made by editing the shell startup scripts, such as
		/etc/profile, /etc/bashrc, bash_profile and .bashrc files in the user's home directory
	- Be sure to use the export command so the variables are accessible by any subprocesses
 - Variables in scripts
	- Seen by any function, command, or statement in the script
	- Anytime we create a variable, it will be in this category by default
	- Standard variables
		VAR=10
 - Variables in scripts that are exported
	- Variables that are local to a script and all sub-processes and sub-shells run by the script
	- We can make a regular variable accessible by all sub-processes by using the export command
		VAR=10
		export VAR
 - Local variables
	- Used within code blocks and can only be seen within that block
	- To make a variable local to a code block, we'd use the local command
		testfunction()
		{
			local DATA
			echo $DATA
		}
	- We use local variables inside of functions

==========

Output to STDOUT and STDERR
---------------------------

 - Sending text to standard out is as simple as using echo or printf.
 - By default, all text goes to STDOUT

cd ~/bin
vi scriptoutput.sh
	#!/bin/bash

	echo "This part of the script worked"
	echo "Error: this part failed" >&2
chmod u+x scriptoutput.sh
scriptoutput.sh
	This part of the script worked
	Error: this part failed
scriptoutput.sh > stdout.txt 2> stderr.txt
cat stdout.txt
	This part of the script worked
cat stderr.txt
	Error: this part failed

 - By utilizing these redirects, we can have data to to STDOUT or STDERR separately.

==========

Pipe data into a script
-----------------------

 - A lot of commands such as less or grep can be piped to.
 - In those cases, we can take the STDOUT of one command and pipe it into the STDIN of those commands.
 - We can implement this fairly easy using read.

cd ~/bin
vi readpipe.sh
	#!/bin/bash

	if [[ -p /dev/stdin ]]; then
		while IFS= read -r LINE; do
			echo "Line: $LINE"
		done
	fi

 - We need tp check to make sure that /dev/stdin is a pipe.
 - If it is, then we'll read from STDIN using the while-read loop, and assign it to the variable named LINE until we run out of data.
 - Inside the loop, we'll display each line using echo.

chmod u+x readpipe.sh
readpipe.sh
	- Nothing happens and there's no error messages.
	- This is good; this is what the if condition was for.
cat /etc/passwd | ./readpipe.sh
	Line: systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin
	Line: dbus:x:81:81:System message bys:/:/sbin/nologin

 - To make reading from a pipe more useful, let's save the data into an array.

vi readpipe.sh
	#!/bin/bash

	if [[ -p /dev/stdin ]]; then
		while IFS= read -r LINE; do
			pipearray+=( "$LINE" )
		done
	fi

	echo ${pipearray[@]}

 - This will load each line into an indexed array named pipearray

==========

Conditional flow with if, then if
---------------------------------

If conditional
	if <condition>
	then

 - It can be shortened a bit by placing the then on the same line as the if, separated by a semicolon.
 - If we want to include an else section, we can

	if <condition> ;then
		<run code>
	else
		<run code>

 - We can also check for more than one condition

	if <condition> ;then
		<run code>
	elseif <condition> ;then
		<run code>
	else
		<run code>

Return code as a condition

	if grep root /etc/passwd ;then
		<run code>
	else
		<run code>

 - In this example, we search /etc/passwd for the word root using grep.
 - If it's found, then grep will return a 0 to the if conditional, and the first code block will run.
 - If grep doesn't find root, then it will return a non-zero number, and the second code block will execute.

Negated return code as a condition

	if ! grep root /etc/passwd ;then
		<run code>
	else
		<run code>

Old- and new-style tests

	if [ "$VAR" = 5 ] ;then
		<run code>
	fi

	if [[ "$VAR" = 5 ]] ;then
		<run code>
	fi

Conditional Tests Using []
 - POSIX compliant
 - Works with older shells, including Bourne
 - Are commands that then test the condition
 - Filename expansion and word splitting happen
 - Parameter expansion happens
 - &&, || <, and > operators get interpreted by the shell
 - Quoting required to preserve variable values

Conditional Tests Using [[ ]]
 - Specific to Bash and ksh
 - Does not work on older shells
 - No filename expansion between brackets
 - No word splitting between brackets
 - Parameter expansion between brackets
 - Command substitution between brackets
 - Supports &&, ||, <, and > operators
 - Automatic arithmetic evaluation of octal/hexadecimal
 - Supports extended regular expression matches
 - Quoting not required

 - It's recommended almost in every case to use double square brackets [[]]
 - Double brackets are more reliable and consistent and are the future in most cases

==========

Conditional flow with case
--------------------------

 - Generally we use IF conditionals in Bash.
 - However, in cases where we're matching more than one pattern with an if-then else-if conditional block, it may be more efficient to use a case statement.

	case $AGE in
		[1-9]) echo "You are quote young" ;;
		[5-9]) echo "Time for elementary school" ;;
		1[0-9]) echo "Time for middle school" ;;
		[2-9][0-9]) echo "You are an adult" ;;
		*) echo "That doesn't seem to be an age"
	esac

 - ;; is called the action list terminator
 - The characters to the left of the parentheses make up a glob
	- You can do pattern matching in the same manner as you would on the command line using wild cards, 
	 character sets, and character classes.
	- However, you cannot use regular expressions
 - * is the wildcard catchall

 - In Bash 4 there are two new action list terminators
	;;&
		- Instead of exiting after the first match, it continues to process matches
	;&
		- Automatically executes the next list without evaluating it's pattern