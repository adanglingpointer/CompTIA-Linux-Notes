15. Automation and Scripting
============================

What makes a shell script a shell script?
-----------------------------------------

vi ~/script.sh
	The file extension tells VI to do syntax highlighting

 - We need to make the first line point to the shell interpreter.
 - We can do this by pointing it directly at the interpreter using an absolute path.

#!/bin/bash
 - In this case we're specifying an absolute path to the bash interpreter executable
 - We can also use a second form:

#!/usr/bin/env bash
 - In this case, we use the ENV command to search the system path for the bash interpreter and execute it there.
 - The advantage is that it could be in a different location and it will still work.

echo "This is a shell script"

 - Save the script, then change the permissions to make it executable.

chmod u+x script.sh
 - This step allows us to execute our script as if it were a command.

 - The last thing we would do to make it seamless is to put our command in the system path.
 - When a user logs in, a directory is added to the system path specifically for that user:
	~/bin
 - We need to create this directory first.

mkdir ~/bin

mv script.sh ~/bin

 - Now we can execute any script in this directory by calling its name without a path.

script.sh
	"This is a shell script"

 - You can name your scripts without the .sh extension to make them seem more like system commands.
 - Or create symbolic links to them without the extension.
 - None of these steps are actually required to run a text file as a shell script.

echo 'echo this is a shell script' > ~/bin/script2.sh
bash ~/bin/script2.sh
 - It runs even without execute permissions or a line indicating the desired interpreter.

==========

Positional arguments
--------------------

cd ~/bin
ls *
 - ls expands the asterisk to show all files

ls debugger.sh script.sh
 - We've passed two arguments

vi posargs.sh

//code example

#!/bin/bash

echo '$0 is' "$0"
echo '$1 is' "$1"
echo '$2 is' "$2"
echo '$@ is' "$@"
echo '$* is' "$*"

 - We use the single quotes so the first variables on the line will not be processed and the literal names will be printed on the screen.
 - The second variable on the line is double quoted which preserves space, but allows variables to be expanded.

chmod u+x posargs.sh
posargs.sh
	$0 is /home/user1/bin/posargs.sh
	$1 is
	$2 is
	$@ is
	$* is
posargs.sh dog cat horse
	$0 is /home/user1/bin/posargs.sh
	$1 is dog
	$2 is cat
	$@ is dog cat horse
	$* is dog cat horse

 - $0 is the path to the script
 - $1 is the first argument
 - $2 is the second argument
 - $@ is all arguments
	- contains word split items, each one essentially quotes
	- if we were to loop through $@ it would iterate three times as each items is a separate thing
 - $* is all arguments
	- contains one thing, all arguments as one entity
	- if we were to loop through all items in $* it would iterate once as it appears as one item

==========

File globbing
-------------

Pattern matching in bash
 - globs
 - extended globs
 - brace expansion
 - basic regular expressions
 - extended regular expressions

What are globs?
 - Originally in Bell Labs Unix, there was a command called glob that expanded wildcard characters into a list of unrooted arguments.
 - /etc/glob
 - Globbing is now a function built into the shell.
 - Globbing support depends on shell type/version
	- Bash shell options may affect how globs work as well
 - Globs are a set of bash features that match or expand certain types of patterns
 - Globs can look and act like regular expressions, but are less expressive and are easier to use.
 - They're also easier for the system to process as well.
 - Don't confuse globs and regular expressions.
 - Globs match file names, whereas regular expressions match text.
 - Sometimes this functionality can look blurred depending on how you're using it.

Using a glob with ls
	ls [0-9]?file*.txt
		- This would get all files starting with the number 0 through 9, followed by one character of any
		 type, and then the world 'file', followed by any number of characters of any type, and finally
		 ending with txt.
		ls 1_file-rev1.txt 2_file-rev1.txt 3_file-rev1.txt
 - This process is being handled by the shell, and the LS command is unaware of it.

Globs and regular expressions
	grep '^A.*\.txt' file1.txt file2.txt

Bash globbing options
 - nocaseglob
 - nocasematch
 - nullglob
 - globstar
 - extglob

Globs vs Regular Expressions
 - Glob:
	[0-9]?file*.txt
 - Regular expressions:
	[0-9].file.*.txt

 - To use a regular expression to do the same job, we need to use a command that has regular expression support built-in, such as grep.
 - LS does not support regular expressions.

Using a regex with ls
	ls [0-9]?file*.txt
	ls | grep '[0-9].file.*\.txt'

 - We'd still list the files in the directory with the LS command, and then pipe the resulting text to grep, which would then use a regular expression to match the text.

==========

Wildcards
---------

 - One of the reasons that manipulating files on the command line can be faster and more efficient than the GUI is file globbing.
 - File globbing uses patterns containing wildcard to match files based on their names.
 - File globbing - The process of expanding a nonspecifric file name containing wildcard characters in specific file names.
 - For instance, if you wanted to list all file names starting with the word 'file' followed by an extension uou could use:
	ls file*
 - This glob can be used with any command as the globbing is handled by the shell itself.

Asterisk (*)
 - Matches zero or more of any type of character.
 - It matches everything and nothing.
	`ls file*` would match 'file.txt' as well as 'file'

Question mark (?)
 - Matches one of any character
	file?.txt will match file1.txt and filea.txt
	file??.txt will match file00.txt and fileab.txt

Character set []
 - Matches one character in list
	file[123].txt will match file1.txt, file2.txt, and file3.txt
 - You can also match a range of character
	file[1-3].txt will match file1.txt, file2.txt, and file3.txt
	file[a-z].txt will match filea.txt, fileb.txt, filec.txt, ...
	file[A-Z].txt will match fileA.txt, fileB.txt, fileC.txt, ...
	It is not advised to mix uppercase and lowercase, ie. file[a-Z].txt, as the results may vary,
	 instead use `file[a-zA-Z].txt
	file[a-zA-Z].txt will match filea.txt, fileB.txt, ...
 - You can also combine ranges with lists
	file[0-9abc].txt will match file0.txt, filea.txt, ...
 - If you want to match the hyphen itself then you need to include the hyphen at the beginning or end of the list of characters in the set
	file[-0-9].txt will match file-,txt, file1.txt, file2.txt, ...

Character set [! ]
 - [! ] negates the match
 - [^ ] negates the match
	file[!0-9].txt will match filea.txt, fileb.txt, ...

Man page on globbing:
	man 7 glob

==========

Bash variable scope
-------------------

 - Environmental variables
	- The entire OS can see
	- These variables are set in the system when it starts
	- Changes to this environment can be made by editing the shell startup scripts, such as
		/etc/profile, /etc/bashrc, bash_profile and .bashrc files in the user's home directory
	- Be sure to use the export command so the variables are accessible by any subprocesses
 - Variables in scripts
	- Seen by any function, command, or statement in the script
	- Anytime we create a variable, it will be in this category by default
	- Standard variables
		VAR=10
 - Variables in scripts that are exported
	- Variables that are local to a script and all sub-processes and sub-shells run by the script
	- We can make a regular variable accessible by all sub-processes by using the export command
		VAR=10
		export VAR
 - Local variables
	- Used within code blocks and can only be seen within that block
	- To make a variable local to a code block, we'd use the local command
		testfunction()
		{
			local DATA
			echo $DATA
		}
	- We use local variables inside of functions

==========

Output to STDOUT and STDERR
---------------------------

 - Sending text to standard out is as simple as using echo or printf.
 - By default, all text goes to STDOUT

cd ~/bin
vi scriptoutput.sh
	#!/bin/bash

	echo "This part of the script worked"
	echo "Error: this part failed" >&2
chmod u+x scriptoutput.sh
scriptoutput.sh
	This part of the script worked
	Error: this part failed
scriptoutput.sh > stdout.txt 2> stderr.txt
cat stdout.txt
	This part of the script worked
cat stderr.txt
	Error: this part failed

 - By utilizing these redirects, we can have data to to STDOUT or STDERR separately.

==========

Pipe data into a script
-----------------------

 - A lot of commands such as less or grep can be piped to.
 - In those cases, we can take the STDOUT of one command and pipe it into the STDIN of those commands.
 - We can implement this fairly easy using read.

cd ~/bin
vi readpipe.sh
	#!/bin/bash

	if [[ -p /dev/stdin ]]; then
		while IFS= read -r LINE; do
			echo "Line: $LINE"
		done
	fi

 - We need tp check to make sure that /dev/stdin is a pipe.
 - If it is, then we'll read from STDIN using the while-read loop, and assign it to the variable named LINE until we run out of data.
 - Inside the loop, we'll display each line using echo.

chmod u+x readpipe.sh
readpipe.sh
	- Nothing happens and there's no error messages.
	- This is good; this is what the if condition was for.
cat /etc/passwd | ./readpipe.sh
	Line: systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin
	Line: dbus:x:81:81:System message bys:/:/sbin/nologin

 - To make reading from a pipe more useful, let's save the data into an array.

vi readpipe.sh
	#!/bin/bash

	if [[ -p /dev/stdin ]]; then
		while IFS= read -r LINE; do
			pipearray+=( "$LINE" )
		done
	fi

	echo ${pipearray[@]}

 - This will load each line into an indexed array named pipearray

==========

Conditional flow with if, then if
---------------------------------

If conditional
	if <condition>
	then

 - It can be shortened a bit by placing the then on the same line as the if, separated by a semicolon.
 - If we want to include an else section, we can

	if <condition> ;then
		<run code>
	else
		<run code>

 - We can also check for more than one condition

	if <condition> ;then
		<run code>
	elseif <condition> ;then
		<run code>
	else
		<run code>

Return code as a condition

	if grep root /etc/passwd ;then
		<run code>
	else
		<run code>

 - In this example, we search /etc/passwd for the word root using grep.
 - If it's found, then grep will return a 0 to the if conditional, and the first code block will run.
 - If grep doesn't find root, then it will return a non-zero number, and the second code block will execute.

Negated return code as a condition

	if ! grep root /etc/passwd ;then
		<run code>
	else
		<run code>

Old- and new-style tests

	if [ "$VAR" = 5 ] ;then
		<run code>
	fi

	if [[ "$VAR" = 5 ]] ;then
		<run code>
	fi

Conditional Tests Using []
 - POSIX compliant
 - Works with older shells, including Bourne
 - Are commands that then test the condition
 - Filename expansion and word splitting happen
 - Parameter expansion happens
 - &&, || <, and > operators get interpreted by the shell
 - Quoting required to preserve variable values

Conditional Tests Using [[ ]]
 - Specific to Bash and ksh
 - Does not work on older shells
 - No filename expansion between brackets
 - No word splitting between brackets
 - Parameter expansion between brackets
 - Command substitution between brackets
 - Supports &&, ||, <, and > operators
 - Automatic arithmetic evaluation of octal/hexadecimal
 - Supports extended regular expression matches
 - Quoting not required

 - It's recommended almost in every case to use double square brackets [[]]
 - Double brackets are more reliable and consistent and are the future in most cases

==========

Conditional flow with case
--------------------------

 - Generally we use IF conditionals in Bash.
 - However, in cases where we're matching more than one pattern with an if-then else-if conditional block, it may be more efficient to use a case statement.

	case $AGE in
		[1-9]) echo "You are quote young" ;;
		[5-9]) echo "Time for elementary school" ;;
		1[0-9]) echo "Time for middle school" ;;
		[2-9][0-9]) echo "You are an adult" ;;
		*) echo "That doesn't seem to be an age"
	esac

 - ;; is called the action list terminator
 - The characters to the left of the parentheses make up a glob
	- You can do pattern matching in the same manner as you would on the command line using wild cards, 
	 character sets, and character classes.
	- However, you cannot use regular expressions
 - * is the wildcard catchall

 - In Bash 4 there are two new action list terminators
	;;&
		- Instead of exiting after the first match, it continues to process matches
	;&
		- Automatically executes the next list without evaluating it's pattern

==========

Numeric Comparison Operators
----------------------------

 - Bash has several ways of checking for numeric equivalence.
 - The POSIX compatible way is to use
	-lt = less than
	-gt = greater than
	-eq = equal
	-le = less than or equal
	-ge = greater than or equal
 - There are also greater than, less than, and equal symbols. But be careful, as they're string comparison operators, not numeric comparison operators.

	if [[ 1 -lt 5 ]]
	if [[ 1 -gt 5 ]]
	if [[ 1 -eq 5 ]]
	if [[ 1 -le 5 ]]
	if [[ 1 -ge 5 ]]

Not numeric comparison operators:

	if [[ 1 > 5 ]]
	if [[ 1 < 5 ]]
	if [[ 1 = 5 ]]

 - There are several older forms of doing integer math in Bash
	- Legacy Bash integer math
		let a="17 + 23"
		a=$(expr 17 + 23)
		a=$[17 + 23]
- These have all been replaced by two forms, double parentheses, and dollar sign double parentheses, depending on if you want to output to STDOUT or not.
	- New Bash integer math
		let a="17 + 23"
		a=$(expr 17 + 23)
		a=$[17 + 23]

		((a=17+23))
		a=$((17+23))

cd ~/bin
vi numericcondition.sh
	#!/bin/bash

	if (($1 > $2)) ;then
		echo "The first argument is larger than the second"
	else
		echo "The second argument is larger than the first"
	fi
chmod u+x numerriccondition.sh
numerriccondition.sh 1 5
	'The second argument is larger than the first'
numerriccondition.sh 5 1
	'The first argument is larger than the second'
vi numericcondition.sh
	#!/bin/bash

	if (($1 > $2)) ;then
		echo "The first argument is larger than the second"
	else
		echo "The second argument is larger than the first"
	fi

	sum=$(($1+$2))
	if [[ "$sum" -ge 10 ]];then
		echo "The sum of the first two arguments is greater than or equal to 10"
	else
		echo "The sum of the first two arguments is less than 10"
	fi
numerriccondition.sh 8 9
	'The second argument is larger than the first'
	'The sum of the first two arguments is greater than or equal to 10'

 - We can use mathematical expressions directly in if-conditionals.
 - Or we can do expressions separately, store the value, and then put the result in an if-conditional.

==========

String conditions
-----------------

 - One of the most common tests in a bash if-conditional is a string comparison.
	if [[ dog = cat ]]
 - Comparing numbers as strings
	if [[ 4 = 4 ]]
 - Comparing numbers as integers
	if [[ 4 -eq 4 ]]
 - Zero length?
	if [[ -z $VAR ]]
 - Not zero length?
	if [[ -n $VAR ]]
 - Equality
	if [[ dog = cat ]]
 - Inequality
	if [[ dog != cat ]]
 - Sort order
	if [[ dog < cat ]]
	if [[ dog > cat ]]
		- Be aware that it uses the ASCII codes and not current locale settings

==========

File conditions
---------------

-e = If the file exists
	- In Linux everything is a file, including devices. This check doesn't discern
-f = If the file exists and is a file
-d = If the file exists and is a directory
-c = If the file exists and is a character device
-b = If the file exists and is a block device
-p = If the file exists and is a pipe
-S = If the file exists and is a socket
-L = If the file exists and is a symbolic link
-g = If the file exists and has the SGID bit set
-u = If the file exists and has the SUID bit set
-r = If the file exists and is readable by the current user
-w = If the file exists and is writable by the current user
-x = If the file exists and is executable by the current user
-s = If the file exists and has a size larger than zero bytes
-nt = If the file is newer than another
-ot = If the file is older than another
-ef = If two files are the same device and have the same inodes

==========

For loop
--------

	for item in <list> ; do
		<work on $item>
	done

 - Static list
	for item in 1 2 3 4 5 ;do
		echo "$item"
	done

 - Dynamic list using seq, old method
	for item in $(seq 1 10) ;do
		echo "$item"
	done

 - Dynamic list using parameter expansion
	for item in {1..10} ;do
		echo "$item"
	done
 - This way we're not spawning a new shell, and executing commands is more reliable and faster.

 - There are times through when we will use command substitution to create a list
 - Dynamic list using command substitution
	for file in $(find /etc) ;do
		echo "$file"
	done
 - However, be careful because the for loop uses the Internal Field Separator (IFS) to word split.
 - The IFS by default splits on blank spaces, so if a file name has a space in it, your loop will break.
 - You can change the IFS temporarily while you're looping
 - Modified IFS
	OLDIFS="$IFS"
	IFS=$'\n'
	for file in $(find /etc) ;do
		echo "$file"
	done
	IFS="$OLDIFS"

 - Another option is to loop through the values of an array
	OLDIFS="$IFS"
	IFS=$'\n'
	for item in ${array[@]} ;do
		echo "$item"
	done
	IFS="$OLDIFS"
 - We not putting quotes around the list, because quoting it will result in there only being one item in the list.

 - Loop through array indices
 - Since the array is indexed, it would be better to loop through the indexes instead
	array = (one two three)

	for i in $(seq 0 $(( ${#array[@]} - 1)) ) ;do
		echo "${array[$i]}"
	done
 - First we create the array
	array = (one two three)
 - Then, we get the number of array items using the #array[@] syntax
 - Then we subtract 1 since the array count started from 1, and we will be looping starting from 0.
 - Next, we use a sequence command to create our list from 0 to the number of array items minus one
	$(seq 0 ... )
 - Now for each iteration, that index number is assigned to the variable named i, and we use that to access the array items items specifically.

 - Use parameter expansion?
	array = (one two three)

	for i in {0..5} ;do
		echo "${array[$i]}"
	done
 - We can't use this parameter expansion example. Parameter expansion happens before math and vaariable expansion.
 - Our only choice is to run a sub shell with a sequence command
	array = (one two three)

	for i in {0..$(( ${#array[@]) - 1))} ;do
		echo "${array[$i]}"
	done

==========

While loop syntax
-----------------

 - It is possible to have a condition inside a for-loop that will break out of the loop before it runs out of items
	for item in {1..10000} ;do
		if [[ $item = 100 ]] ;then
			break;
		fi
	done
 - A better idea is to use a loop with a condition built in, a while-loop and until-loop
 - While loop syntax
	while [ condition ] ;do
		<Do stuff>
	done

 - A while loop while iterate while a condition is true, and the until loop will iterate until the conidition is true.

 - The condition can match on wildcards but not regular expressions.

 - The simplest while loop we can make is the infinite loop by replacing the condition with eowrd true.
 - This loop will keep iterating forever, unless the user kills the script or the conditions of the it-condition dobuel square bracekst is true and the break command runs.
	while true ;do
		if [[ <condition> ]] ;then
			break;
		fi
	done

 - By nesting on if-conditionals inside of a while-true loop, we can take advantage of the if-conditionals double square brackets and regular expressions.

 - While loop with condition
	i='0'
	while [ $i -lt 4 ] ;do
		echo "$i is still less than 4"
		((i++))
	done
 - The loop continues as long as the value of i is less than 4.
 - Each time the loop iterates, the value of i is increased.
 - Once it reached 4, the loop exits.

 - One major advantage of using a while-read loop over a for-loop is that is handles different types of text better.
 - Any text value provided on the command line will be read by the while-read loop and it will handle blank spaces fine.

==========

Quiz answer

Which is the preferred way of doing integer math in Bash?
((a=17+23))
The double parenthesis method is the preferred way of doing integer math. This method also returns codes so can be used in an if conditional. Values can be returned to STDOUT by using the `$(())` syntax such as `a=$((17+23))`.

==========

16. Automating Jobs
===================

Manage one-time jobs with at
----------------------------

 - There are two different types of scheduled jobs: one-time jobs and recurring jobs.
 - For one-time jobs, we can use a service called at.
 - The at service runs jobs at a certain time, or in the case of a batch job, when the CPU load avergae drops below 0.8.
 - at syntax
	at <time format>
 - at supports a wide variety of time formats
	4:25am
	16:45
	midnight
	noon
	tomorrow
	4pm + 2 days
	now + 3 hours
	teatime (4pm)
	3:00 5/15/15
	3:00 5-15-15
	10am Jul 31

sudo yum install -y at
sudo systemctl start atd
sudo systemctl enable atd
at now +5min
	This will bring up a prompt where we can type linux commands to run
	at> mkdir ~/Documents.bak
	at> rsync -a ~/Documents/ ~/Documents.bak
		It's necessary to put the trailing slash after /Documments for rsynax to copy the files inside of
		 documents to the back of directory
	When done, press ctrl+d
atq
	Verify at job

4	Fri Sep 25 92:29:00 2020	a		user1
Job #	Time and date			Queue letter	Username

at -c 4
	View the at file (job number 4 in this example)
	This shows the contents of the at job, including the Shell environment
atrm 4
	Remove/cancel at job

 - The at service also allows us to create batch jobs.
 - The difference between an at job and a batch job is that the at job rubs at a specified time; Batch jobs run when the system load average drops below 0.8, ensuring they only get run when the system isn't busy.

batch
	insert the commands you wish
	at> touch ~/batchfile.txt
	press ctrl+d to save it
atq
	list at and batch jobs
	if it doesn't show anything, the job must have ran
ls -l ~/batchfile.txt
	the existence of this file shows our batch job did run

==========

Manage reoccuring user jobs with cron
-------------------------------------

 - A cron job is stored in a cron table, or cron tab
 - There are two types of cron jobs
	- User Cron Jobs
		- Specific to each user
		- Managed by users
		- Stored in /var/spool/cron/<user>
	- System Cron Jobs
		- System-wide, ran by the OS, not users
		- Managed by root
		- Stored in /etc/cron.d

Crontab example
	45	23	*		*	6		/home/grant/bin/backup.sh
	Minute	Hour	Day of month	Month	Day of week	Command to run
	[0-59]		[1-31]		[1-12]	[0-6]

 - This cron job will run 45 minutes after the hour
	- If it was an * it would run every minute of the hour
	- We can have more value for this field, for example:
		15,30,45
		15-45
		*/10 = step value, run every 10th minute
		1-59/2 = every odd minute
 - 23 = hour of the day
	- Only run 11pm
	- Midnight is hour 0
	- * means run every hour
 - Day of the month
	- * means every day of the month
 - Month of the year
	- 1 through 12, or jan to dec
	- * means every month
 - Day of the week
	- 0 is Sunday, we can also abbreviate with 3 letter words, ie. sun


sudo yum install -y cronie crontabs
sudo systemctl start crond
crontab -e
	bring up crontab in vi
		0 1 * * * rsync -a ~/Documents/ ~/Documents.bak
	this will run our backup command once per day at 1am
crontab -l
	show cronjob

 - If you want to get rid of the entire user cron tab file, you can use
	crontab -r

man crontab
man 5 crontab

==========

Manage reoccuring system jobs with cron
---------------------------------------

 - System cron jobs are stored in /etc/cron.d
 - To create a cron job, we'll need to create a new file inside of this directory

sudo vi /etc/cron.d/backupdocs
	0 1 * * * root rsync -a /home/user1/Documents/ /home/user1/Documents.bak
		We specified the user and absolute paths

 - If you have a script that you'd like to run every hour, you could also just copy to /etc/cron.hourly
 - There are directories for hourly, daily, weekly, and monthly.
 - In most cases, when you edit the configuration of a service, you need to restart that service. However, in the case of cron it re-parcels the cron tab files every minute and loads them into memory, so there's no reason to restart after each change.
	ls -d /etc/cron.*

man cron
man crontab
man 5 crontab

==========

Configure a system to use Network Time Protocol
-----------------------------------------------

 - In a GUI go into overview mode by clicking in top left-hand corner, and type 'date and time'.
 - This interface allows you to change the date, time, and time zone.
 - Every computer has a real time clock, or RTC, that keeps time when the computer is off.
 - When the computer is turned on, the OS reads the real time clock and then keeps time from that point on.
 - If we set up Network Time Protocol, or NTP, our computer will contact a time server on the internet and adjust the time accordingly. This method is the most accurate.

timedatectl
	In CentOS
	Show local time, Universal time (Greenwich, UK), RTC time, and time zone
timedatectl list-timezones
	list all (>400 timezones)
	press q to quit
timedatectl list-timezones | grep America
	narrow down to ~150
timedatectl set-timezone America/Vancouver
	set timezone
timedatectl
	verify

timedatectl set-time 23:26:00
	set time manually
	hour:minute:second
timedatectl set-date 2020-09-20
	yyyy-mm-dd
timedatectl set-time "2020-09-23 23:26:00"
	set both at same time

timedatectl set-ntp true
	use ntp server to update automatically

==========

17. Version Control
===================

Start with Git
--------------

sudo dnf install -y git

 - There are a couple of different ways of storing configurations for Git.
 - System-wide configurations will be stored in /etc/gitconfig.
 - Usually you will set configuration options for the user.
	- Git calls this the global config, which may be a bit confusing.
	- It is global in the sense that it spans all projects created by this one user.

Git user config (global)
 - $HOME/.gitconfig
	Inside user's home directory

 - We can also save configurations at the project level

Git project config
 - /path/to/project/.git/config

 - We don't need to know where these files are stored because we can use the git config command to make changes

Set system config
	git config --system

Set user config
	git config --global
 - You have to be logged in as that user

Set project config
	git config --local
 - This is the default behavior, so you can actually leave of --local
	git config

 - The first thing you'll want to do is configure your name and email address.
 - If you will be pushing commits to GitHub, it should be the same username and email that you use there.

git config --global user.name "Grant McWilliams"
git config --global user.email "grant@soundlxnuxtrxxning.com"

 - Next, configuring the text editor to use.  Choose the editor that you like the most.

git config --global core.editor "vim"

git config --global color.ui true
	Turn on colors so we can see Git messages better

git config --list
	List configuration options, to confirm

 - If you later install Git on another computer and configure it with a different email address and contribute to the same project, it will appear that the commits come from two different people.
 - It's wise to use the same information on every host you plan to commit with.

mkdir ~/GitProjectOne
cd GitProjectOne
git init
ls -la
	.git directory is used to track changes
	deleting this and the directory will no longer be tracked with Git
cd .git
ls

==========

Commit and add files
--------------------

cd ~/GitProjectOne/
vim ourfirstfile.txt
	This is our first project file
git status
	..."untracked files present"
git add ourfirstfile.txt
git status
	"No commits yet"
	"Changes to be committed:"

 - Git doesn't store the versions of files, but rather the changes to them.
 - For every commit, you need to leave a message for the log to describe what the change set does.

git commit -m "initial commit"
 - Leaving out the m and Git will bring up an editor for multi-line commit message logs
git status
	"On branch master"
	"nothing to commit, working tree clean"

vim ourfirstfile.txt
	This is our first project file
	This is a new line
git status
	"modified: ourfirstfile.txt"

 - You either need to add the file, or do a `git commit -a` to commit all changes

git commit -a
	This will bring up an editor

How to write commit messages
 - Do not store date
 - Write in present tense
 - Short line summary
 - Optional descriptive message
 - Do not be vague

==========

Why branch?
-----------

 - Branching allows us to try new ideas, switch between branches quickly, and allow collaboration on new features without disrupting current ones.

Rollback
 - Creates a new commit
 - Changes current files to match old files

Branching
 - Create a test copy of all files
 - Make changes
 - Test changes
 - Merge changes back into production copy, or throw away test copy

==========

Create branches
---------------

git branch
	* master
git branch testconfig
	Create new branch
git branch
	* master
	testconfig
git checkout testconfig
	Switch to testconfig branch
git branch
	master
	* testconfig
vim ourfirstfile.txt
 - Add a third line
git commit -a -m "This adds a third line"
git log
 - You can see the commit in the log
git checkout master
cat ourfirstfile.txt
 - The third line is not there
git log
 - Commit does not exist in this master branch

==========

Compare, rename, and delete branches
------------------------------------

git branch
	List branches
git diff master..testconfig
	See which changes testconfig has made to master
git diff master..testconfig^
	Compare the previous version of the testconfig branch to current version of master
git branch --move testconfig development
	Rename testconfig to development
git checkout development
git branch development-user1
git branch
	* development
	development-user1
	master
git branch --delete development-user1
git branch

 - If you have made changes to files in the branch you will be warned if you try to delete it.
 - You will need to use -D to delete it

==========

Merge branches
--------------

git branch
git diff master..development
git checkout master
git merge development
	Merge development into master as a fast-forward merge
git diff master..development
	These should be the same now
git checkout development
vim ourfirstfile.txt
	Add a fourth line
git commit -a -m "This adds a fourth line"
git diff master.development

 - To force a scenario where you cannot do a fast-forward merge, go back to the master branch and change the file there.

git checkout master
