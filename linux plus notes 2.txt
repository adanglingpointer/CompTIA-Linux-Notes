Linux networking overview
-------------------------

there are a certain number of items that need to be configured in order for Linux to have functional networking
 - a host address
	usually this is an IPv4 or IPv6
 - network subnet mask
	to define the network
 - default gateway router address
	so traffic can leave the local network
 - hostname
	to identify your host
 - name resolution
	so you can refer to other hosts by name instead of needing to remember IP addresses
	this could be local name resolution, or through a remote server such as DNS

the network configuration can be set dynamically via the dynamic host configuration protocol
 or by using IPv6
DHCP or set live configuration manually

There are two sets of tools for configuring a live network configuration manually:
 - net-tools (legacy)
	these tools include arp, hostname, ifconfig, route, and netstat
	most distros still allow you to install them
	they are still prevelant, however they have been obsoleted by iproute2
 - iproute2

manual saved config
 - Red Hat 8 and older:
	/etc/sysconfig/network-scripts/
 - Debian
	/etc/network/interfaces
 - SUSE
	/etc/sysconfig/network

Network Manager
 - network service
 - a unified system for configuration of network interfaces
 - started in 2004 by Red Hat
 - CLI and graphical interface

==========

prepare for linux networking
----------------------------

in virtualbox, we can create a second adapter, as internal network
creating the same network name for two VMs will provide us with an internal network accessible only between them

==========

configure live network connections
----------------------------------

 - host address
 - network subnet
 - default gateway

these two are saved into files:
 - hostname
 - name resolution

net-tools & iproute2

Legacy Network Interface Naming

Type		Name
----		----
Ethernet	eth0, eth1
Wireless	wlan0, wlan1

the number was the order in which the machine scanned them
although simple, it meant the network device name could change depending on the order your machine saw the hardware
now the naming is more complex looking but more reliable

Consistent Network Interface Naming

Type and Location			Name
-----------------			----
Ethernetl device, PCI bus 0, slot 3	enp0s3
Wireless device, PCI bus 3, slot 0	wlp3s0

-

Legacy net-tools	iproute2 equivalent
----------------	-------------------
arp			ip neighbor
ifconfig		ip address
iptunnel		ip tunnel
mii-tool		ethtool
netstat			ss

ifconfig
	get network interface names with net-tools
ip -s addr
	the iproute2 command to list your network interfaces

route
	get the default gateway with net-tools
ip route
	get the default gateway with iproute2

sudo mii-tool enp0s8
	interfaces at hardware level via net-tools
sudo ethtool enp0s8
	interfaces at hw level via iproute2
	speed, duplex, and if cable (link detected) is plugged in

the Address Resolution Protocol (ARP) is used for associating a hardware address like the Max address
 with a host address like an IP address

arp
	net-tools command for showing which IP address is associated with which hardware address
	 and the network interface name
ip neighbor [shortened to ip neigh, or ip n]
	iproute2 for showing hw address
	more reliable than arp

Enable network interface:
 net-tools: ifconfig enp0s8 up
 iproute2: ip link set dev enp0s8 up

Disable network interface:
 net-tools: ifconfig enp0s8 down
 iproute2: ip link set dev enp0s8 down

Config networking:
 net-tools: sudo ifconfig enp0s8 172.16.25.125 netmask 255.255.255.0
 iproute2: sudo ip addr add 172.16.25.125/24 dev enp0s8
	shortened: sudo ip a a 172.16.25.125/24 dev enp0s8

The ip command by default uses CIDR addressing for the subnet mask, so provie it in bits such as /24 .
With ifconfig you're setting the IP address;
 if you need another address you need to create an alias for the interface.
With the ip command you're setting an IP address, and can add another to the interface.
You can remove addresses with ip, using delete instead of add.

Add a network route:
 net-tools: route add -net 192.168.1.0 netmask 255.255.255.0 dev eth0
 iproute2: ip route add 192.168.1.0/24 dev eth0

Add a default gateway:
 net-tools: route add default gw 192.168.1.1
 iproute2: ip route add default via 192.168.1.1

netstat -neopa
	Gather network statistics; numeric addresses with extended info including network timers, program IDs,
	 and both listening and non listening ports.
	Uses net-tools package
ss -neopa
	The iproute2 equivalent

==========

Configure saved network connections
-----------------------------------

Legacy Linux Network Configurations

 - Debian -	/etc/network/interfaces
	includes the configuration for all interfaces

Debian Network Config:

//
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
	address 172.16.25.125
	netmask 255.255.255.0
	gateway 172.16.25.1
iface eth0 inet6 static
	address 2001:DB8:1:3::1
	netmask 56
	gateway 2001:DB8:1::
//

 - SUSE -	/etc/sysconfig/network/ifcfg-*
 - Red Hat -	/etc/sysconfig/network-scripts/ifcfg-*

Most distributions that use Network Manager have moved to a new file format called a key file.
That includes Red Hat Enterprise Linux, SUSE, and Debian.

sudo NetworkManager --print-config
	view Network Manager configuration
	config file may be located such as /etc/NetworkManager/NetworkManager.conf

Enterprise Linux will look first for a key file for the interface,
 and then switch to ifcfg files if it doesn't fine one.
Debian will look for its /etc/network/interfaces file first and then for key files second.
SUSE only looks for key files.

Key files: /etc/NetworkManager/system-connections/

-

ifcfg file:

dhcp-

//
NAME="Wired Connection 1"
UUID=770b2b71-a0f3-3904-904a-87b6899f3f1e

DEVICE=enp0s3
BOOTPROTO=dhcp
ONBOOT=yes
//

manual config-

//
NAME="Wired connection 1"
UUID=3f719ac-d819-4af7-911b-287209b49fab
ONBOOT="yes"
DEVICE="enp0s8"

IPADDR0=172.16.25.125
PREFIX0=24
#NETMASK=255.255.255.0
GATEWAY0=172.16.25.1
DNS1=4.2.2.2
PEERDNS="no"
BOOTPROTO="none"

IPV6INIT="yes"
IPV6_ADDR_GEN_MODE="stable-privacy"
IPV6_AUTOCONF=yes
//

-

NetworkManager keyfile:

dhcp-

//
[connection]
id=Wired Connection 1
uuid=770b2b71-a0f3-3904-904a-87b6899f3f1e

type=ethernet
autoconnect-priority=-999
interface-name=enp0s3
timestamp=1668541060

[ethernet]

[ipv4]
method=auto
//

manual config-

//
[connection]
id=Wired conneciton 1
uuid=3f719ac-d819-4af7-911b-287209b49fab
type=ethernet
interface-name=enp0s8

[ethernet]
[ipv4]
address1=172.16.25.125/24,172.16.25.1
dns=4.2.2.2;
ignore-auto-dns=true
method=manual

[ipv6]
addr-gen-mode=stable-privacy
method=auto
//

-

The gloval DNS name server file is /etc/resolve.conf
However, you can ensure the specified servers are specified to each interface.  To keep these DNS servers interface
 specific, you need to set PEERDNS to "no" in the ifcfg file or in the key file set ignore-auto-dns to true.
If you change PEERDNS to yes, or ignore-auto-dns defaults then these DNS servers are copied to the
 /etc/resolve.conf file and become global.

Linux network file documentation
 - ifcfg
	https://developer-old.gnome.org/NetworkManager/stable/nm-settings-ifcfg-rh.html
 - NetworkManager keyfiles
	https://developer-old.gnome.org/NetworkManager/stable/nm-settings-keyfile.html

NetworkManager reload connection:
 nmcli con reload

In the past, you'd edit hostname via file /etc/hostname, and view hostname using the hostname command.
A better way to do this:
 sudo hostnamectl set-hostname rhhost1.localnet.com
View hostname:
 hostnamectl

Name resolution can be done either locally via a static file, or remotely through DNS.
The other in which name resolution happens is defined in the /etc/nsswitch.conf file.
	The 'hosts' line of this file defines the order in which name resolution happens.

hosts:	files dns myhostname
	First the system looks at local files (/etc/host), then config'd DNS server, finally nss-myhostname
	 functionality that resolves names locally such as localhost.

For local name resolution add entries to the /etc/host file

-

/etc/host file example:

//
127.0.0.1	localhost	localhost.localdomain	localhost4	localhost4.localdomaon4

192.168.2.100	rhhost1.localnet.com	rhhost1
//

IP		FQDN			alias

-

Editing the interface specific configuration files have lines for DNS.
If you want the DNS service to be global then place them in the /etc/resolve.conf file.

==========

Configure networking with NetworkManager
----------------------------------------

NetworkManager:
 - dynamic
 - control daemon
 - configuration daemon
 - keeps network connections up
 - allows manual configuration

NetworkManager comes with four different programs to configure the network:
 - ncmli
	command line
 - nmtui
	text user interface
 - control-center
	graphical config tool
 - nm-connection-editor
	a graphical user interface tool for certain tasks not yet handled by the control center


Control Center
 - can be opened as 'Network' application from overview mode,
	or from Wired Settings from top right network menu

nm-connection-editor
 - it's a GUI tool, but must be opened in terminal first with
	nm-connection-editor
 - has more power than control center
 - can create new connections such as Bluetooth, Bridge, IP tunnel, and VLAN

nmtui
 - can be used to edit a connection, activate a connection, or set system hostname

nmcli
 - nmcli networking sub command managed system-wide networking settings, not specific to interfaces
	 - nmcli general status
	 - nmcli networking connectivity
	 - nmcli radio wifi on
	 - nmcli monitor
		watch changes in connectivity, devices, or connection profiles
	 - nmcli connection monitor
	 - nmcli device monitor
	 - nmcli connection show
		can be shortened:	nmcli con show
					nmcli c show
					nmcli c s
 - show connection statistics
 - activate/deactivate interface
 - add/delete interface
 - modify a connection
 - edit connection interactively
 - clone a connection
 - monitor connections
 - reload all connections
 - load an ifcfg file
 - import/export VPN connections
 - nmcli device subcommand allows you to manage the network interface itself
	 - nmcli device wifi list
	 - nmcli device wifi rescan
	 - nmcli device wifi hotspot
 - man nmcli
	last page has examples
 - man nmcli-examples

nmcli con show --active
	show all active connections
nmcli con show
	show all connections
nmcli con up 'Wired connection 1'
	bring up wired connection 1
nmcli con up ifname enp0s8
	bring up connection by interface name

nmcli con add con-name internal-eth ifname enp0s8 type ethernet ip4 172.16.25.125/24 gw4 172.16.25.1
	create new connection profile for enp0s8
nmcli con up internal-eth
	bring up network
nmcli con show
	verify it's up

nmcli con edit
	interactive tool that gives possible options

==========

Troubleshoot DNS client issues
------------------------------

/etc/nsswitch.conf

host line defines how DNS is read
hosts:	files dns myhostname

files = /etc/hosts

global DNS servers = /etc/resolv.conf

another place where DNS servers are configured is in the network interface specific config files
Enterprise Linux -	/etc/sysconfig/network-scripts/ifcfg*
	for example	/etc/sysconfig/network-scripts/ifcfg-eth0

ifcfg DNS entries:
	PEERDNS=no
	DNS1=8.8.8.8

if PEERDNS is set to yes, then the entry will get copied to the /etc/resolv.conf file

dig @192.168.1.254 ford.com
	resolve ford.com with 192.168.1.254 nameserver

==========

Monitor the network and remediate
---------------------------------

there may be issues with any number of different areas
 - routing
 - network saturation
 - packet drops
 - timeouts
 - name resolution
 - network adapters
 - network interface configurations

routing issues
 - route
 - netstat -r
 - ip route

troubleshoot packet hops
 - nmap
 - traceroute
 - tracepath
 - mtr

 - arp
	to verify that local switching is working well and that you don't have a corrupted ARP table

troubleshoot network saturation
 - iftop
 - ipperf

troubleshoot packet drops and timeouts
 - ping
	ensure connectivity
 - tcpdump
	look for dropped packets and timeouts
	packet analysis from command line
 - Wireshark
	GUI
 - netcat
	read data from network stream

troubleshoot name resolution
 - nslookup
	legacy systems
 - dig
 - host
 - whois

troubleshoot network adapters
 - ethtool
 - nmcli
	configure or save network configurations
 - ip
	configure live network settings (not persistent)
 - ifconfig
	legacy

-

What is the network interface configuration file for the eth0 interface in Enterprise Linux?
	/etc/sysconfig/network-scripts/ifcfg-eth0

When troubleshooting DNS problems what does analysing the */etc/nsswitch.conf* file accomplish?
	The nsswitch.conf file doesn't determine the order in which DNS servers are queried.
	The nsswitch.conf file lists name resolution sources and determines which order each is queried. If DNS isn't listed then it won't query a DNS server.

==========

User and group overview
-----------------------

Linux user types
 - non-login users
	used to run system services
 - login users
	super user (root)
	regular users (unprivileged)

Linux groups
 - users can be added to groups
 - access control is configured for the entire group
 - every user has a name
 - every user has an ID
 - every user must belong to at least one group
 - every user automatically belongs to a primary group
 - the primary group has a name and ID number
	the user's primary group has the same name as the user
	the primary group ID # is often the same as user ID #, but doesn't have to be

User name:		bob
User ID:		1001
Primary group name:	bob
Primary group ID:	1001

when a user creates a file, it has a user owner and a group owner
if bob created a file, the user owner would be bob and the group owner would be bob's primary group

User name:		charlie
User ID:		1002
Primary group name:	charlie
Primary group ID:	1002

User owner:		charlie
Group owner:		charlie

legacy systems: all users are in one user group
The problem with all users belongong to the same group is that the files they create will be accessible by each
 other, because they'll all be owned by the user's group, which all users belong to.
This creates security holes and grants users access to files created by other users.

 - users have only one primary group
 - users can belong to more supplementary groups
 - groups cannot contain other groups
 - a user must have a password to login
	or encrypted keys
 - user and group names are case sensitive

==========

User account files
------------------

 - all local user account info is stored in /etc/passwd
 - one user per line
 - seven columns delimited by colons

root:x:0:0:root:/root:/bin/bash
1    2 3 4 5    6     7

1 - username
2 - encoded password
	if the system is using the Shadow Suite, there will be an x as a placeholder
	 saying that the password is encoded and is not stored in this file.
	it's extremely rare for any modern Linux distributions to not use a Shadow Suite
	 so this column usually has an x in it.
	this used to contain a one-way hash
3 - numeric user ID
	system accounts user user IDs between 1 and 999
	 root and system service accounts
	non-admin user account IDs start at 1000
	 in older Linux systems they started at 500
	 can be configured in /etc/login.defs
4 - numeric group ID
	primary group
	we can find the name of the primary group by cross-referencing this number in the /etc/group file
5 - GECOS comment field
	General Comprehensive Operating System created by General Electric in the 1960s
	store info about user here
6 - home directory
	/root for root
	/home/username for everyone else
	 this can be configured in /etc/default/useradd, or with 'useradd -D'
7 - login shell
	the default in Enterprise Linux and many others is /bin/bash

 - one-way hash - mathematical function that takes a variable-length input string and converts it 
	to a fixed-length binary sequence
 - only root can access /etc/shadow

cat /etc/shells
	print out installed shells
sudo dnf search shell
	find some installable shells
	 dash, fish, ksh, zsh

==========

User password file
------------------

 - with the Shadow Suite installed, all encoded passwords are stored in /etc/shadow file
	which is readable by one one but root
 - contains password and account aging information

user1:$6$vUdt/Qgy6$KN.L!@G9l0o3.VhUhw65ehu.:18818:0:99999:7: : :
1     2                                     3     4 5     6 7 8 9

1 - username
2 - encoded password
	this will be one or more ! if the password has not been set, or if the account is locked
	$6$ = hash algorithm, the characters in between dollar signs denote the hash type
	vUdt/Qgy6$ = cryptographic salt
	KN.L!@G9l0o3.VhUhw65ehu = encoded password
3 - days since password was changed
	this is listed as the number of days since January 1, 1970
	if this number is 0, the user should change password next time they login
4 - days before password can be changed
	0 = may be changed at any time
5 - days until password must be changed
	99999 = 274 years
6 - days to warn before expiring
7 - grace period
	number of days after the password expires that the password is still accepted
8 - account expiration date
	this is listed as the number of days since January 1, 1970
9 - reserved for future use

 - hash types - linux supports multiple different hashing algorithms

Prefix	Hash Type
1	MD5		not recommended anymore
2a	Blowfish
2y	Blowfish
5	SHA-256
6	SHA-512

 - password hash type can be changed with authconfig command, or by editing /etc/pamd.d/password-auth file
	sudo authconfig -passalgo sha512

 - salt - random data that is used as additional input to a one-way hash
	- new salt generated for each password

changing account defaults
	- /etc/login.defs
	- authconfig
	- chage

==========

Group accounts and passwords
----------------------------

 - multiple users can be managed as one group
 - OS groups are stored in the /etc/group file

wheel:x:10:user
1     2 3  4

1 - group name
2 - group password
	if a group is given a password, it will be stored in the /etc/gshadow file
3 - group ID
	non-admin group ID starts at 1000
	any group with an ID under 1000 belongs to the root user or system services
4 - group members, separated by columns

group account passwords: /etc/gshadow

user1:!: :
1     2 3 4

1 - group name
2 - group password
	any user with the correct password can switch to the new group
	 newgrp sales
	if the password is empty, only members of the group can switch to it and will not be prompted for a password
	if the field starts with an ! then the group is restricted and only members of the group can switch to it
	 after they enter a password
	in these cases, the new group with become the user's primary group.
3 - group admins separated by commas
	group admins can change the group password or members of the group
4 - group members

groups
	this command shows you what groups you belong to
	left most group is the primary group
	files that are created by the user will be owned by them and their primary group

==========

Create and delete users
-----------------------

user account data files

Config Items			File
User accounts			/etc/passwd
Passwords, account aging	/etc/shadow
Account defaults		/etc/login.defs
				/etc/default/useradd
Skeleton directory		/etc/default/useradd

 - the skeleton directory contains the files that are copied to each new user's home directory automatically

useradd command
 - create user accounts
 - configure user defaults
 - set basic account aging
 - specify custom user configurations

Option	Function
-d	User's home directory
-u	User ID
-g	Primary group ID
-G	Supplementary group(s)
-s	Default shell

Account Aging Options
Option	Function
-e	Account expiration
-f	Account inactive period

account inactive period = the number of days after an account expires before it's disabled

 - these parameters are set when first creating a user
 - the change command has more power when configuring account aging for existing users

Administration Options
Option	Function
-r	Creates a system account
-p	Encrypted password
-M	Does not create a home directory
-N	Does not create a primary group
-k	Specifies a custom skeleton directory

 - useradd will not encrypt the password
	that has to be done with another program, then pasted here

sudo useradd
	with no options, it will print all available options
sudo useradd bob
	create a new user, bob
sudo passwd bob
	change password for bob
sudo userdel bob
	delete bob but keep their home directory and their files
sudo userdel -r bob
	delete bob and his home directory

==========

Modify user accounts
--------------------

 - most of the syntax for the usermod command is identical to that of useradd

usermod command
 - modify existing accounts
 - lock and unlock accounts
 - add users to supplementary groups
 - move a user's home directory

usermod User Options
Option	Function
-s	Changes shell
-l	Changes user's name
-u	Changes user ID
-d	Changes user's home directory

usermod Group Options
Option	Function
-g	Changes primary group ID
-G	Adds to supplementary group(s)
-a	Appends to existing list

usermod Admin Options
Option	Function
-m	Moves user's home directory
-L	Locks user account
-U	Unlocks user account

usermod Aging Options
Option	Function
-e	Account expiration
-f	Account inactive period

sudo usermod -u 1010 -g 1001 -s /bin/sh sally
	new user ID of 1010, new group ID of 1001, with new shell for sally

==========

Create and delete groups
------------------------

Group Info
 - Groups have a name
 - Groups have a numeric ID
 - Users belong to one primary group
 - Users can belong to multiple supplementary groups
 - Groups can not contain other groups

Supplementary Group Limits

Operating System		Groups
OpenBSD, macOS			16
Linux kernel < 2.6.3		32
Linux kernel >= 2.6.3		65536
FreeBSD > 8.0			1023
Oracle Solaris			1024
Windows				1024

getconf NGROUPS_MAX
 - check the maximum number of supplemental groups that a user can belong to

groups
 - check which groups the logged-in user belongs to
 - left most group is the primary group

groups sally
 - check which groups user sally belongs to

id
 - a bit more info: numeric group IDs as well as names

id sally

getent group wheel
 - show all users that belong to the wheel group

getent group
 - list all groups
 - the is the same output as viewing the /etc/group file with cat

sudo groupadd -g 1050 accounting
 - add the group accounting with group ID 1050

cat /etc/group
 - check groups

sudo groupmod -g 1051 accounting
 - users who have accounting as their primary group will have the primary group ID field updated in /etc/passwd
 - however, any files that were owned by the group will need to be updated manually

sudo groupdel accounting
 - delete group accounting

man groupmod

==========

Assign users to groups
----------------------

sudo groupadd sales
 - create sales group

sudo usermod -a -G sales sally
 - add sally to sales group
 - this is a very user-centric way to managing group membership, as it focuses on the user's information,
	not the groups
 -a = append
	without this, all supplementary groups will be replaced
 -G = supplemental groups

sudo usermod -a -G sales,audio,wheel sally
 - add sally to multiple supplementary groups

sudo groups sally
 - check groups sally belongs to

sudo gpasswd -a sally sales
 - this is a group-centric method
 -a = add
 - this adds sally to the sales group

sudo gpasswd -d sally sales
 - remove user sally from group sales

 - user must log out and back in for change to be visible

==========

Become a super user
-------------------

 - logging in as root on the GUI opens the door the acquiring viruses
 - if there are multiple admins then there will be no accountability
 - a better practice is to only elevate privileges when necessary

su command
 -c = runs a command as the specified user
 -g = runs a command as the specified group
 - or -l = starts a login shell
 -s = runs a command in the specified shell

 - su authentication, account and session handling is provided by PAM
	PAM - the Linux pluggable Authentication Module System
 - su pam file is located at: /etc/pam.d/su

/etc/pam.d/su example lines

# Uncomment the following line to implicitly trust users in the "wheel" group
#auth	sufficient	pam_wheel.so trust use_uid

uncommenting this line will allow the users to su without entering a password

# Uncomment the following line to require a user to be in the "wheel" group
#auth	required	pan_wheel.so use_uid

uncommenting this line will only allow users in the wheel group to use su
	this is true even if they know the root password

whoami
	prints out user logged in as
	'who I currently am'
logname
	prints out user that you were logged in as initially
su root
	type in root's password, to switch to root user

 - a difference between logging in as root and switching to root is the environment
 - the environment = the variables and system configuration that comes with a logged in user

echo $PATH
	list of directories that Linux will look through to find commands

exit
	exit the user logged in with using su

su root
	will use the original user's environment variables

su - root
	simiplified to su -
	will inherit the root user's variables

su - -c 'cat /etc/shadow'
	execute cat as superuser without keeping you logged in as root

sudo vs su ?

==========

Elevate group privileges
------------------------

sudo groupadd accounting
	add a group named accounting
sudo gpasswd accounting
	create a password for the group
sudo cat /etc/gshadow
	view group password file
newgrp accounting
	switch primary group to accounting group
sudo p

 - if you want a user to be able to switch to a group without typing in the password, you just need to add them
	to the group

sudo gpasswd -a user1 accounting
	add user1 to accounting group
	now they won't be prompted for password when switching group
		using newgrp accounting, for example

 - when you run newgrp, bash replaces the current shell with a new shell
 - you may notice that command history is not the same
 - you can also verify this by viewing the shell level variable

echo $SHLVL
	print shell level

exit
	switch back to original primary group (or one shell back)
	can be ran multiple times if nested within multiple shells (4 or more)

 - a group administrator can change the group password and manage other members of the group

sudo gpasswd -A user1 accounting
	make user1 an administrator of the accounting group
	now the third column in /etc/shadow will be the group administrator's name

==========

Elevate privileges using sudo
-----------------------------

 - commands with a Set User ID and Set Group ID bits allow a user to elevate privileges without even prompting for
	a password

Method		Authentication
SUID/SGID	No password needed
su		Needs root password
sudo		Needs user password

 - when using sudo, a user has to enter their own password
 - this is far more desirable, as users never need to know the root password, keeping it safe

sudo cat /etc/shadow
	elevate privileges for that one command
	sudo caches password for a short for convenience, keeping you from typing each time you run a command

 - sudo has a configuration file, the sudores file, that can allow administrators to determine who gets to elevate
	privileges and which commands they can run
 - visudo only allows the file to be edited by one process at a time and opens it in vi

sudo visudo
	this configuration file allows you to group together users, hosts, and even commands,
	 and then create access control rules, allowing certain users to run certain commands on certain hosts

 - when sudo is using operating system groups you need to prefix the name with a percent symbol

## Allows people in group wheel to run all commands on all hosts as all users
%wheel	ALL=(ALL)	ALL

 - in this case, adding a user to the wheel group gives that user full root privileges
 - they could even change the root password or take away other admins' sudo rights

escape :q!
	quit visudo

==========

Manage sudo users
-----------------

 - Linux has the concept of users and groups but the most powerful tool for elevating privileges is sudo,
	which has similar concepts of its own
 - groups of users in sudo are called User Aliases
 - when you want to assign admin rights to a group of users you can create a User Alias and place elevant
	users in it

sudo Aliases

Alias		Function
User_Alias	Groups users
Runas_Alias	Groups run-as users
Cmnd_Alias	Groups commands
Host_Alias	Groups hosts

Runas Alias = these are users that commands can be run as, for instance if files are owned by Apache, you might
 want to run the web admin tools as Apache instead of root
Command Alias = for example, we could group all web admin commands together into web tools Command Alias
Host Alias = for example, if we wanted to allow all web admins to access all web tools on all web servers
	we'd group together web servers into a Host Alias

sudo visudo
	edit the sudoers file
	we can add aliases in this file

User_Alias DRIVEADMINS = user1
Cmnd_Alias DRIVETOOLS = /usr/sbin/gdisk
Host_Alias DRIVEHOSTS = rhhost1.localnet.com

DRIVEADMINS	DRIVEHOSTS	=(ALL)		DRIVETOOLS
User_Alias	Host_Alias	Runas_Alias	Cmnd_Alias

Together it looks like
DRIVEADMINS DRIVEHOSTS =(ALL) DRIVETOOLS

If you want the DRIVEADMINS to be able to run these commands without a password, you can add add a tag between
	the Runas_Alias and the Cmnd_Alias:
DRIVEADMINS DRIVEHOSTS =(ALL) NOPASSWD: DRIVETOOLS
	Other tags can be added after the :

- Some text editors such as VI allow you to open a shell inside of them and run commands
	Be careful of giving out sudo privileges to text editors.
	If a user is able to elevate privileges while running VI they could run any command inside of it as root
	or even edit any files.

visudo will refuse to exit if syntax is wrong
using a diff text editor to edit the sudoers file, and the syntax is wrong, then sudo won't operate
	in that case you'll need to use su to fix it

----------
==========

less
touch
ls -l
which
	find full path of a command
	which gdisk