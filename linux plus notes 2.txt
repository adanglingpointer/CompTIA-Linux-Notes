Linux networking overview
-------------------------

there are a certain number of items that need to be configured in order for Linux to have functional networking
 - a host address
	usually this is an IPv4 or IPv6
 - network subnet mask
	to define the network
 - default gateway router address
	so traffic can leave the local network
 - hostname
	to identify your host
 - name resolution
	so you can refer to other hosts by name instead of needing to remember IP addresses
	this could be local name resolution, or through a remote server such as DNS

the network configuration can be set dynamically via the dynamic host configuration protocol
 or by using IPv6
DHCP or set live configuration manually

There are two sets of tools for configuring a live network configuration manually:
 - net-tools (legacy)
	these tools include arp, hostname, ifconfig, route, and netstat
	most distros still allow you to install them
	they are still prevelant, however they have been obsoleted by iproute2
 - iproute2

manual saved config
 - Red Hat 8 and older:
	/etc/sysconfig/network-scripts/
 - Debian
	/etc/network/interfaces
 - SUSE
	/etc/sysconfig/network

Network Manager
 - network service
 - a unified system for configuration of network interfaces
 - started in 2004 by Red Hat
 - CLI and graphical interface

==========

prepare for linux networking
----------------------------

in virtualbox, we can create a second adapter, as internal network
creating the same network name for two VMs will provide us with an internal network accessible only between them

==========

configure live network connections
----------------------------------

 - host address
 - network subnet
 - default gateway

these two are saved into files:
 - hostname
 - name resolution

net-tools & iproute2

Legacy Network Interface Naming

Type		Name
----		----
Ethernet	eth0, eth1
Wireless	wlan0, wlan1

the number was the order in which the machine scanned them
although simple, it meant the network device name could change depending on the order your machine saw the hardware
now the naming is more complex looking but more reliable

Consistent Network Interface Naming

Type and Location			Name
-----------------			----
Ethernetl device, PCI bus 0, slot 3	enp0s3
Wireless device, PCI bus 3, slot 0	wlp3s0

-

Legacy net-tools	iproute2 equivalent
----------------	-------------------
arp			ip neighbor
ifconfig		ip address
iptunnel		ip tunnel
mii-tool		ethtool
netstat			ss

ifconfig
	get network interface names with net-tools
ip -s addr
	the iproute2 command to list your network interfaces

route
	get the default gateway with net-tools
ip route
	get the default gateway with iproute2

sudo mii-tool enp0s8
	interfaces at hardware level via net-tools
sudo ethtool enp0s8
	interfaces at hw level via iproute2
	speed, duplex, and if cable (link detected) is plugged in

the Address Resolution Protocol (ARP) is used for associating a hardware address like the Max address
 with a host address like an IP address

arp
	net-tools command for showing which IP address is associated with which hardware address
	 and the network interface name
ip neighbor [shortened to ip neigh, or ip n]
	iproute2 for showing hw address
	more reliable than arp

Enable network interface:
 net-tools: ifconfig enp0s8 up
 iproute2: ip link set dev enp0s8 up

Disable network interface:
 net-tools: ifconfig enp0s8 down
 iproute2: ip link set dev enp0s8 down

Config networking:
 net-tools: sudo ifconfig enp0s8 172.16.25.125 netmask 255.255.255.0
 iproute2: sudo ip addr add 172.16.25.125/24 dev enp0s8
	shortened: sudo ip a a 172.16.25.125/24 dev enp0s8

The ip command by default uses CIDR addressing for the subnet mask, so provie it in bits such as /24 .
With ifconfig you're setting the IP address;
 if you need another address you need to create an alias for the interface.
With the ip command you're setting an IP address, and can add another to the interface.
You can remove addresses with ip, using delete instead of add.

Add a network route:
 net-tools: route add -net 192.168.1.0 netmask 255.255.255.0 dev eth0
 iproute2: ip route add 192.168.1.0/24 dev eth0

Add a default gateway:
 net-tools: route add default gw 192.168.1.1
 iproute2: ip route add default via 192.168.1.1

netstat -neopa
	Gather network statistics; numeric addresses with extended info including network timers, program IDs,
	 and both listening and non listening ports.
	Uses net-tools package
ss -neopa
	The iproute2 equivalent

==========

Configure saved network connections
-----------------------------------

Legacy Linux Network Configurations

 - Debian -	/etc/network/interfaces
	includes the configuration for all interfaces

Debian Network Config:

//
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
	address 172.16.25.125
	netmask 255.255.255.0
	gateway 172.16.25.1
iface eth0 inet6 static
	address 2001:DB8:1:3::1
	netmask 56
	gateway 2001:DB8:1::
//

 - SUSE -	/etc/sysconfig/network/ifcfg-*
 - Red Hat -	/etc/sysconfig/network-scripts/ifcfg-*

Most distributions that use Network Manager have moved to a new file format called a key file.
That includes Red Hat Enterprise Linux, SUSE, and Debian.

sudo NetworkManager --print-config
	view Network Manager configuration
	config file may be located such as /etc/NetworkManager/NetworkManager.conf

Enterprise Linux will look first for a key file for the interface,
 and then switch to ifcfg files if it doesn't fine one.
Debian will look for its /etc/network/interfaces file first and then for key files second.
SUSE only looks for key files.

Key files: /etc/NetworkManager/system-connections/

-

ifcfg file:

dhcp-

//
NAME="Wired Connection 1"
UUID=770b2b71-a0f3-3904-904a-87b6899f3f1e

DEVICE=enp0s3
BOOTPROTO=dhcp
ONBOOT=yes
//

manual config-

//
NAME="Wired connection 1"
UUID=3f719ac-d819-4af7-911b-287209b49fab
ONBOOT="yes"
DEVICE="enp0s8"

IPADDR0=172.16.25.125
PREFIX0=24
#NETMASK=255.255.255.0
GATEWAY0=172.16.25.1
DNS1=4.2.2.2
PEERDNS="no"
BOOTPROTO="none"

IPV6INIT="yes"
IPV6_ADDR_GEN_MODE="stable-privacy"
IPV6_AUTOCONF=yes
//

-

NetworkManager keyfile:

dhcp-

//
[connection]
id=Wired Connection 1
uuid=770b2b71-a0f3-3904-904a-87b6899f3f1e

type=ethernet
autoconnect-priority=-999
interface-name=enp0s3
timestamp=1668541060

[ethernet]

[ipv4]
method=auto
//

manual config-

//
[connection]
id=Wired conneciton 1
uuid=3f719ac-d819-4af7-911b-287209b49fab
type=ethernet
interface-name=enp0s8

[ethernet]
[ipv4]
address1=172.16.25.125/24,172.16.25.1
dns=4.2.2.2;
ignore-auto-dns=true
method=manual

[ipv6]
addr-gen-mode=stable-privacy
method=auto
//

-

The gloval DNS name server file is /etc/resolve.conf
However, you can ensure the specified servers are specified to each interface.  To keep these DNS servers interface
 specific, you need to set PEERDNS to "no" in the ifcfg file or in the key file set ignore-auto-dns to true.
If you change PEERDNS to yes, or ignore-auto-dns defaults then these DNS servers are copied to the
 /etc/resolve.conf file and become global.

Linux network file documentation
 - ifcfg
	https://developer-old.gnome.org/NetworkManager/stable/nm-settings-ifcfg-rh.html
 - NetworkManager keyfiles
	https://developer-old.gnome.org/NetworkManager/stable/nm-settings-keyfile.html

NetworkManager reload connection:
 nmcli con reload

In the past, you'd edit hostname via file /etc/hostname, and view hostname using the hostname command.
A better way to do this:
 sudo hostnamectl set-hostname rhhost1.localnet.com
View hostname:
 hostnamectl

Name resolution can be done either locally via a static file, or remotely through DNS.
The other in which name resolution happens is defined in the /etc/nsswitch.conf file.
	The 'hosts' line of this file defines the order in which name resolution happens.

hosts:	files dns myhostname
	First the system looks at local files (/etc/host), then config'd DNS server, finally nss-myhostname
	 functionality that resolves names locally such as localhost.

For local name resolution add entries to the /etc/host file

-

/etc/host file example:

//
127.0.0.1	localhost	localhost.localdomain	localhost4	localhost4.localdomaon4

192.168.2.100	rhhost1.localnet.com	rhhost1
//

IP		FQDN			alias

-

Editing the interface specific configuration files have lines for DNS.
If you want the DNS service to be global then place them in the /etc/resolve.conf file.

==========

Configure networking with NetworkManager
----------------------------------------

NetworkManager:
 - dynamic
 - control daemon
 - configuration daemon
 - keeps network connections up
 - allows manual configuration

NetworkManager comes with four different programs to configure the network:
 - ncmli
	command line
 - nmtui
	text user interface
 - control-center
	graphical config tool
 - nm-connection-editor
	a graphical user interface tool for certain tasks not yet handled by the control center


Control Center
 - can be opened as 'Network' application from overview mode,
	or from Wired Settings from top right network menu

nm-connection-editor
 - it's a GUI tool, but must be opened in terminal first with
	nm-connection-editor
 - has more power than control center
 - can create new connections such as Bluetooth, Bridge, IP tunnel, and VLAN

nmtui
 - can be used to edit a connection, activate a connection, or set system hostname

nmcli
 - nmcli networking sub command managed system-wide networking settings, not specific to interfaces
	 - nmcli general status
	 - nmcli networking connectivity
	 - nmcli radio wifi on
	 - nmcli monitor
		watch changes in connectivity, devices, or connection profiles
	 - nmcli connection monitor
	 - nmcli device monitor
	 - nmcli connection show
		can be shortened:	nmcli con show
					nmcli c show
					nmcli c s
 - show connection statistics
 - activate/deactivate interface
 - add/delete interface
 - modify a connection
 - edit connection interactively
 - clone a connection
 - monitor connections
 - reload all connections
 - load an ifcfg file
 - import/export VPN connections
 - nmcli device subcommand allows you to manage the network interface itself
	 - nmcli device wifi list
	 - nmcli device wifi rescan
	 - nmcli device wifi hotspot
 - man nmcli
	last page has examples
 - man nmcli-examples

nmcli con show --active
	show all active connections
nmcli con show
	show all connections
nmcli con up 'Wired connection 1'
	bring up wired connection 1
nmcli con up ifname enp0s8
	bring up connection by interface name

nmcli con add con-name internal-eth ifname enp0s8 type